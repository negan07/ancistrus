diff -urN D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_collate.c D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_collate.c
--- D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_collate.c	2016-10-11 17:52:55.000000000 +0200
+++ D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_collate.c	2017-01-05 20:33:13.750207683 +0100
@@ -300,8 +300,8 @@
 static int is_ucode(const char *s);
 static int sym_cmp(const void *n1, const void *n2);
 static void do_starter_lists(col_locale_t *cl);
-static void dump_base_locale(int n);
-static void dump_der_locale(int n);
+/*static void dump_base_locale(int n);*/
+/*static void dump_der_locale(int n);*/
 static void dump_collate(FILE *fp);
 
 enum {
@@ -339,7 +339,7 @@
 		snprintf(buf, sizeof(buf), "%s %05d", cur_col->name, anonsection);
 		++anonsection;
 	}
-#warning devel code
+/*#warning devel code*/
 /* 	verbose_msg(VDETAIL, "section %s\n", name); */
 	p->name = xsymdup(name);
 	p->itm_list = NULL;
@@ -350,7 +350,7 @@
 /* 	memset(p->rules, 0, MAX_COLLATION_WEIGHTS); */
 /* 	memset(cur_rule, R_FORWARD, 4); */
 
-#warning devel code
+/*#warning devel code*/
 	if (*p->name == 'a') {
 		cur_num_weights = p->num_rules = 4;
 		memset(p->rules, R_FORWARD, 4);
@@ -725,7 +725,7 @@
 	const keyword_table_t *k;
 
 	order_state = 0;
-#warning devel code
+/*#warning devel code*/
 /* 	cur_num_weights = 0; */
 /* 	cur_num_weights = 4; */
 /* 	memset(cur_rule, R_FORWARD, 4); */
@@ -871,7 +871,7 @@
 
 
 }
-
+#if 0
 static void print_colnode(const void *ptr, VISIT order, int level)
 {
     const colitem_t *p = *(const colitem_t **) ptr;
@@ -884,14 +884,14 @@
         printf("\n");
     }
 }
-
+#endif
 static void print_weight_node(const void *ptr, VISIT order, int level)
 {
     const weight_t *p = *(const weight_t **) ptr;
 	int i;
 
     if (order == postorder || order == leaf)  {
-        printf("weight: (%d)  ", p->num_weights);
+        printf("weight: (%lu)  ", p->num_weights);
 		for (i = 0 ; i < p->num_weights ; i++) {
 			if (p->rule[i] & R_FORWARD) {
 				printf("F");
@@ -1289,7 +1289,7 @@
 			override_len, multistart_len, weightstr_len,
 			wcs2colidt_len, index2weight_len, index2ruleidx_len,
 			ruletable_len,
-#warning mult by 2 for rule indecies
+/*#warning mult by 2 for rule indecies*/
 			(override_len + multistart_len + weightstr_len
 			 + wcs2colidt_len + index2weight_len + index2ruleidx_len + ruletable_len) * 2,
 			(override_len + multistart_len + weightstr_len
@@ -1515,7 +1515,7 @@
 			++s;
 			if (cur_base && !strcmp(cur_base->name,s)) {
 /* 				verbose_msg(VDETAIL, "skipping copy of base file %s\n", s); */
-#warning need to update last in order and position or check
+/*#warning need to update last in order and position or check*/
 				return;
 			}
 /* 			verbose_msg(VDETAIL, "full copy of %s\n", s); */
@@ -1601,7 +1601,7 @@
 	p = loc->section_list;
 
 	while (p) {
-#warning devel code
+/*#warning devel code*/
 /* 		if (!((p->data_type == DT_SECTION) || (p->data_type == DT_REORDER))) { */
 /* 			verbose_msg(VDETAIL, "fsli = %d\n", p->data_type); */
 /* 		} */
@@ -1744,7 +1744,7 @@
 
 	p = new_colitem(item, def);
 
-#warning devel code
+/*#warning devel code*/
 	if (superset) {
 		if (tfind(p, &cur_base->root_colitem, colitem_cmp)) {
 /* 			verbose_msg(VDETAIL, "skipping superset duplicate collating item \"%s\"\n", p->string); */
@@ -1865,7 +1865,7 @@
 	cur_section = sect;
 /* 	fprintf(stdout, "cur_section now %s\n", cur_section->name); */
 
-#warning need to add section to weight list?
+/*#warning need to add section to weight list?*/
 
 	/* now do rules */
 	do {
@@ -1945,7 +1945,7 @@
 		error_msg("currently reorder_after is not supported in supersets");
 	}
 
-#warning have to use rule for current section!!!
+/*#warning have to use rule for current section!!!*/
 
 	if (!(t = next_token())) {
 		error_msg("missing arg for reorder_after");
@@ -1996,10 +1996,10 @@
 	memcpy(cur_section->rules, save_cur_rule, MAX_COLLATION_WEIGHTS);
 
 
-#warning devel code
+/*#warning devel code*/
 /* 	verbose_msg(VDETAIL, "reorder -- %s %d\n", ((weighted_item_t *)(lli->data))->symbol, w->num_weights); */
 
-#warning hack to get around hu_HU reorder-after problem
+/*#warning hack to get around hu_HU reorder-after problem*/
 /* 	if (!w->num_weights) { */
 
 /* 	} else { */
@@ -2406,7 +2406,7 @@
 		comm_cur_ptr = comm_cur_ptr->next;
 	}
 
-#warning devel code
+/*#warning devel code*/
 /* 	{ */
 /* 		ll_item_t *p = comm_cur_ptr; */
 /* 		verbose_msg(VDETAIL, "init_comm_ptr\n"); */
@@ -2636,14 +2636,14 @@
 	}
 /* 	printf("DONE\n"); */
 }
-
+#if 0
 static void print_starter_node(const void *ptr, VISIT order, int level)
 {
     if (order == postorder || order == leaf)  {
 		fprintf(stderr, "   %s\n", *(const char **) ptr);
     }
 }
-
+#endif
 static void finalize_base(void)
 {
 	ll_item_t *s;
@@ -2672,7 +2672,7 @@
 	base_locale_array[base_locale_len].index2weight_offset = index2weight_len;
 	base_locale_array[base_locale_len].index2ruleidx_offset = index2ruleidx_len;
 	if (!strcmp(cur_base->name,"ja_JP") || !strcmp(cur_base->name,"ko_KR")) {
-#warning fix the index2weight check!!
+/*#warning fix the index2weight check!!*/
 		index2weight_len_inc = 0;
 	}
 /* 	printf("%s -- index2weight_len = %d\n", cur_base->name, index2weight_len); */
@@ -2709,14 +2709,14 @@
 			if (lli->data_type & DT_RANGE) {
 				i += mr;
 				mr = 0;
-#warning check ko_kR and 9
+/*#warning check ko_kR and 9*/
 /* 				++i; */
 				lli->idx = i;
 				assert(!rli);
 				rli = lli;
 				verbose_msg(VDETAIL, "range pre = %d  after = ", i);
 				i += ((range_item_t *)(lli->data))->length + 1;
-#warning check ko_kR and 9
+/*#warning check ko_kR and 9*/
 /* 				++i; */
 				verbose_msg(VDETAIL, "%d\n", i);
 				if (!index2weight_len_inc) { /* ko_KR hack */
@@ -2740,7 +2740,7 @@
 			} else {
 				assert(lli->data_type & DT_REORDER);
 				r = ll_len( ((section_t *)(lli->data))->itm_list );
-#warning check ko_kR and 9
+/*#warning check ko_kR and 9*/
 				if (r > mr) {
 					mr = r;
 				}
@@ -2762,7 +2762,7 @@
 				i += mr;
 				mr = 0;
 				i = lli->idx + ((range_item_t *)(lli->data))->length + 1;
-#warning check
+/*#warning check*/
 			} else if ((lli->data_type & DT_WEIGHTED) && !(s->data_type & DT_REORDER)) {
 				i += mr;
 				mr = 0;
@@ -3247,7 +3247,7 @@
 
 #endif
 
-#warning handle UNDEFINED idx specially?  what if in only some of derived?
+/*#warning handle UNDEFINED idx specially?  what if in only some of derived?*/
 /* 	base_locale_array[base_locale_len].undefined_idx = final_index_val0("UNDEFINED"); */
 	base_locale_array[base_locale_len].undefined_idx = 0;
 
@@ -3300,15 +3300,15 @@
 
 	return strcmp(s2, s1);
 }
-
+#if 0
 static void print_starter_all_node(const void *ptr, VISIT order, int level)
 {
     const weighted_item_t *w = *(const weighted_item_t **) ptr;
-	colitem_t *ci;
+/*	colitem_t *ci;
 	void *p;
 	int n;
 	colitem_t x;
-
+*/
     if (order == postorder || order == leaf)  {
 #if 0
 		if ((n = is_ucode(w->symbol)) != 0) {
@@ -3329,7 +3329,7 @@
 #endif
 	}
 }
-
+#endif
 static void process_starter_node(const void *ptr, VISIT order, int level)
 {
     const weighted_item_t *w = *(const weighted_item_t **) ptr;
@@ -3585,7 +3585,7 @@
 		}
 #if 1
 		else if (memcmp(ti[i-1], ti[i], blocksize*sizeof(tbl_item)) > 0) {
-			printf("bad sort %i!\n", i);
+			printf("bad sort %lu!\n", i);
 			abort();
 		}
 #endif
@@ -3692,7 +3692,7 @@
 static unsigned int add_rule(weighted_item_t *wi)
 {
 	weight_t *w = wi->weight;
-	int i, j, r, n;
+	int i,/* j,*/ r, n;
 	uint16_t rbuf[MAX_COLLATION_WEIGHTS];
 	uint16_t ws_buf[32];
 	void *mm;
@@ -3769,7 +3769,7 @@
 static unsigned int add_range_rule(range_item_t *ri)
 {
 	weight_t *w = ri->weight;
-	int i, j, r, n;
+	int i,/* j,*/ r, n;
 	uint16_t rbuf[MAX_COLLATION_WEIGHTS];
 	uint16_t ws_buf[32];
 	void *mm;
@@ -3844,7 +3844,7 @@
 }
 
 #define DUMPn(X) fprintf(stderr, "%10d-%-.20s", base_locale_array[n]. X, #X);
-
+#if 0
 static void dump_base_locale(int n)
 {
 	assert(n < base_locale_len);
@@ -3877,10 +3877,10 @@
 	DUMPn(multistart_offset);
 	fprintf(stderr, "\n");
 }
-
+#endif
 #undef DUMPn
 #define DUMPn(X) fprintf(stderr, "%10d-%s", der_locale_array[n]. X, #X);
-
+#if 0
 static void dump_der_locale(int n)
 {
 	assert(n < der_locale_len);
@@ -3899,7 +3899,7 @@
 
 	fprintf(stderr, "\n");
 }
-
+#endif
 
 static unsigned long collate_pos;
 
@@ -3918,7 +3918,7 @@
 	collate_pos += len;
 }
 
-#define OUT_U16C(X,N) fprintf(fp,"\t%10d, /* %8lu %s */\n", X, collate_pos++, N);
+#define OUT_U16C(X,N) fprintf(fp,"\t%10lu, /* %8lu %s */\n", (unsigned long int)X, collate_pos++, N);
 
 static void dump_collate(FILE *fp)
 {
diff -urN D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_locale.c D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_locale.c
--- D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_locale.c	2016-10-11 17:52:55.000000000 +0200
+++ D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_locale.c	2017-01-05 18:31:12.399508532 +0100
@@ -200,9 +200,9 @@
 				p += 1 + (unsigned char) *p;
 			}
 			/* len, char, string\0 */
-			fprintf(ofp, "#define __LOCALE_DATA_AT_MODIFIERS_LENGTH\t\t%d\n",
+			fprintf(ofp, "#define __LOCALE_DATA_AT_MODIFIERS_LENGTH\t\t%ld\n",
 					i + (at_strings_end - at_strings));
-			fprintf(ofp, "static const unsigned char __locale_at_modifiers[%d] = {",
+			fprintf(ofp, "static const unsigned char __locale_at_modifiers[%ld] = {",
 					i + (at_strings_end - at_strings));
 			i = 0;
 			p = at_strings;
@@ -234,11 +234,11 @@
 			}
 			fprintf(ofp, "#define __LC_ALL\t\t%d\n\n", i);
 
-			fprintf(ofp, "#define __lc_names_LEN\t\t%d\n",
+			fprintf(ofp, "#define __lc_names_LEN\t\t%lu\n",
 					pos[__LOCALE_DATA_CATEGORIES-1] + strlen(lc_names[__LOCALE_DATA_CATEGORIES-1]) + 1);
 			total_size += pos[__LOCALE_DATA_CATEGORIES-1] + strlen(lc_names[__LOCALE_DATA_CATEGORIES-1]) + 1;
 
-			fprintf(ofp, "static unsigned const char lc_names[%d] =\n",
+			fprintf(ofp, "static unsigned const char lc_names[%lu] =\n",
 					pos[__LOCALE_DATA_CATEGORIES-1] + strlen(lc_names[__LOCALE_DATA_CATEGORIES-1]) + 1);
 			fprintf(ofp, "\t\"");
 			for (i=0 ; i < __LOCALE_DATA_CATEGORIES ; i++) {
@@ -434,13 +434,13 @@
 	char *cs;					/* codeset */
 	int i;
 
-	typedef struct {
+/*	typedef struct {
 		char *glibc_name;
 		char name[5];
-		char dot_cs;				/* 0 if no codeset specified */
-		char cs;
+		char dot_cs;*/				/* 0 if no codeset specified */
+/*		char cs;
 	} locale_entry;
-
+*/
 	/* First the C locale. */
 	locales[0].glibc_name = locales[0].name;
 	strncpy(locales[0].name,"C",5);
@@ -1080,7 +1080,7 @@
 	int j, m;
 	char c_buf[2];
 
-#warning fix the char entries for monetary... target signedness of char may be different!
+/*#warning fix the char entries for monetary... target signedness of char may be different!*/
 
 	c_buf[1] = 0;
 	c_buf[0] = *nl_langinfo(X);
diff -urN D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_wc8bit.c D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_wc8bit.c
--- D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_wc8bit.c	2016-10-11 17:52:55.000000000 +0200
+++ D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_wc8bit.c	2017-01-05 13:42:03.891366478 +0100
@@ -99,31 +99,29 @@
 	int total_size = 0;
 
 	if (!setlocale(LC_CTYPE, "en_US.UTF-8")) {
-		/* Silly foreigners disabling en_US locales */
-		FILE *fp = popen("locale -a", "r");
-		if (!fp)
-			goto locale_failure;
-
-		while (!feof(fp)) {
+		/* setlocale might be just a stub */
+		fp = popen("locale -a", "r");
+		if (!fp) {
+			printf("#error could not execute 'locale -a'\n");
+                        return EXIT_FAILURE;
+		}
+		
+	/*	while (!feof(fp)) {
 			char buf[256];
 			size_t len;
 
-			if (fgets(buf, sizeof(buf) - 10, fp) == NULL)
-				goto locale_failure;
+			if (fgets(buf, sizeof(buf) - 10, fp) == NULL) {
+				printf("#error could not read 'locale -a' output buffer\n");
+				return EXIT_FAILURE;
+			}
 
 			len = strlen(buf);
 			if (len > 0 && buf[len - 1] == '\n')
 				buf[--len] = '\0';
 			if (len < 5 || strcasecmp(&buf[len-5], ".UTF8") != 0)
 				strcat(buf, ".UTF8");
-			if (setlocale(LC_CTYPE, buf))
-				goto locale_success;
 		}
-
- locale_failure:
-		printf("could not find a UTF8 locale ... please enable en_US.UTF-8\n");
-		return EXIT_FAILURE;
- locale_success:
+	*/	
 		pclose(fp);
 	}
 
diff -urN D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_wctype.c D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_wctype.c
--- D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_wctype.c	2016-10-11 17:52:55.000000000 +0200
+++ D7000_V1.0.1.84_WW_src/Source/uClibc-0.9.32/extra/locale/gen_wctype.c	2017-01-05 18:34:25.926098706 +0100
@@ -227,11 +227,12 @@
 			++verbose;
 			continue;
 		}
-		if (!setlocale(LC_CTYPE, *argv)) {
+	/* setlocale might be just a stub */
+	/*	if (!setlocale(LC_CTYPE, *argv)) {
 			verbose_msg("setlocale(LC_CTYPE,%s) failed!  Skipping this locale...\n", *argv);
 			continue;
 		}
-
+	*/
 		if (!(totitle = wctrans("totitle"))) {
 			verbose_msg("no totitle transformation.\n");
 		}
@@ -306,67 +307,67 @@
 #endif
 #if 0
 				if (c < 256) {
-					unsigned int glibc;
+					unsigned int curr_stdclib;
 
-					glibc = 0;
-					if (isalnum(c)) ++glibc; glibc <<= 1;
-					if (isalpha(c)) ++glibc; glibc <<= 1;
-					if (isblank(c)) ++glibc; glibc <<= 1;
-					if (iscntrl(c)) ++glibc; glibc <<= 1;
-					if (isdigit(c)) ++glibc; glibc <<= 1;
-					if (isgraph(c)) ++glibc; glibc <<= 1;
-					if (islower(c)) ++glibc; glibc <<= 1;
-					if (isprint(c)) ++glibc; glibc <<= 1;
-					if (ispunct(c)) ++glibc; glibc <<= 1;
-					if (isspace(c)) ++glibc; glibc <<= 1;
-					if (isupper(c)) ++glibc; glibc <<= 1;
-					if (isxdigit(c)) ++glibc;
-					verbose_msg("%#8x : ctype %#4x\n", c, glibc);
+					curr_stdclib = 0;
+					if (isalnum(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (isalpha(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (isblank(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (iscntrl(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (isdigit(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (isgraph(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (islower(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (isprint(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (ispunct(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (isspace(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (isupper(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (isxdigit(c)) { ++curr_stdclib; }
+					verbose_msg("%#8x : ctype %#4x\n", c, curr_stdclib);
 				}
 #endif
 #if 1
 				/* Paranoid checking... */
 				{
-					unsigned int glibc;
+					unsigned int curr_stdclib;
 					unsigned int mine;
 
-					glibc = 0;
-					if (iswalnum(c)) ++glibc; glibc <<= 1;
-					if (iswalpha(c)) ++glibc; glibc <<= 1;
-					if (iswblank(c)) ++glibc; glibc <<= 1;
-					if (iswcntrl(c)) ++glibc; glibc <<= 1;
-					if (iswdigit(c)) ++glibc; glibc <<= 1;
-					if (iswgraph(c)) ++glibc; glibc <<= 1;
-					if (iswlower(c)) ++glibc; glibc <<= 1;
-					if (iswprint(c)) ++glibc; glibc <<= 1;
-					if (iswpunct(c)) ++glibc; glibc <<= 1;
-					if (iswspace(c)) ++glibc; glibc <<= 1;
-					if (iswupper(c)) ++glibc; glibc <<= 1;
-					if (iswxdigit(c)) ++glibc;
+					curr_stdclib = 0;
+					if (iswalnum(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (iswalpha(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (iswblank(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (iswcntrl(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (iswdigit(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (iswgraph(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (iswlower(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (iswprint(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (iswpunct(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (iswspace(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (iswupper(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+					if (iswxdigit(c)) { ++curr_stdclib; }
 
 					mine = 0;
-					if (mywalnum(d,c)) ++mine; mine <<= 1;
-					if (mywalpha(d,c)) ++mine; mine <<= 1;
-					if (mywblank(d,c)) ++mine; mine <<= 1;
-					if (mywcntrl(d,c)) ++mine; mine <<= 1;
-					if (mywdigit(d,c)) ++mine; mine <<= 1;
-					if (mywgraph(d,c)) ++mine; mine <<= 1;
-					if (mywlower(d,c)) ++mine; mine <<= 1;
-					if (mywprint(d,c)) ++mine; mine <<= 1;
-					if (mywpunct(d,c)) ++mine; mine <<= 1;
-					if (mywspace(d,c)) ++mine; mine <<= 1;
-					if (mywupper(d,c)) ++mine; mine <<= 1;
-					if (mywxdigit(d,c)) ++mine;
+					if (mywalnum(d,c)) { ++mine; } mine <<= 1;
+					if (mywalpha(d,c)) { ++mine; } mine <<= 1;
+					if (mywblank(d,c)) { ++mine; } mine <<= 1;
+					if (mywcntrl(d,c)) { ++mine; } mine <<= 1;
+					if (mywdigit(d,c)) { ++mine; } mine <<= 1;
+					if (mywgraph(d,c)) { ++mine; } mine <<= 1;
+					if (mywlower(d,c)) { ++mine; } mine <<= 1;
+					if (mywprint(d,c)) { ++mine; } mine <<= 1;
+					if (mywpunct(d,c)) { ++mine; } mine <<= 1;
+					if (mywspace(d,c)) { ++mine; } mine <<= 1;
+					if (mywupper(d,c)) { ++mine; } mine <<= 1;
+					if (mywxdigit(d,c)) { ++mine; }
 
-					if (glibc != mine) {
-						verbose_msg("%#8x : glibc %#4x != %#4x mine  %u\n", c, glibc, mine, d);
+					if (curr_stdclib != mine) {
+						verbose_msg("%#8x : curr_stdclib %#4x != %#4x mine  %u\n", c, curr_stdclib, mine, d);
 						return EXIT_FAILURE;
 					}
 #if 0
 					if (iswctype(c,is_comb) || iswctype(c,is_comb3)) {
 /*						if (!iswpunct(c)) { */
 							verbose_msg("%#8x : %d %d %#4x\n",
-								   c, iswctype(c,is_comb),iswctype(c,is_comb3), glibc);
+								   c, iswctype(c,is_comb),iswctype(c,is_comb3), curr_stdclib);
 /*						} */
 					}
 #endif
@@ -553,7 +554,7 @@
 		for (c = 0; c <= 0x10ffffUL; c++)
 #endif
 		{
-			unsigned int glibc;
+			unsigned int curr_stdclib;
 			unsigned int mine;
 			unsigned int upper, lower;
 
@@ -568,19 +569,19 @@
 			}
 #endif
 #endif
-			glibc = 0;
-			if (iswalnum(c)) ++glibc; glibc <<= 1;
-			if (iswalpha(c)) ++glibc; glibc <<= 1;
-			if (iswblank(c)) ++glibc; glibc <<= 1;
-			if (iswcntrl(c)) ++glibc; glibc <<= 1;
-			if (iswdigit(c)) ++glibc; glibc <<= 1;
-			if (iswgraph(c)) ++glibc; glibc <<= 1;
-			if (iswlower(c)) ++glibc; glibc <<= 1;
-			if (iswprint(c)) ++glibc; glibc <<= 1;
-			if (iswpunct(c)) ++glibc; glibc <<= 1;
-			if (iswspace(c)) ++glibc; glibc <<= 1;
-			if (iswupper(c)) ++glibc; glibc <<= 1;
-			if (iswxdigit(c)) ++glibc;
+			curr_stdclib = 0;
+			if (iswalnum(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+			if (iswalpha(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+			if (iswblank(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+			if (iswcntrl(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+			if (iswdigit(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+			if (iswgraph(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+			if (iswlower(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+			if (iswprint(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+			if (iswpunct(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+			if (iswspace(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+			if (iswupper(c)) { ++curr_stdclib; } curr_stdclib <<= 1;
+			if (iswxdigit(c)) { ++curr_stdclib; }
 
 			{
 				unsigned int u;
@@ -617,21 +618,21 @@
 				}
 
 				mine = 0;
-				if (mywalnum(d,c)) ++mine; mine <<= 1;
-				if (mywalpha(d,c)) ++mine; mine <<= 1;
-				if (mywblank(d,c)) ++mine; mine <<= 1;
-				if (mywcntrl(d,c)) ++mine; mine <<= 1;
-				if (mywdigit(d,c)) ++mine; mine <<= 1;
-				if (mywgraph(d,c)) ++mine; mine <<= 1;
-				if (mywlower(d,c)) ++mine; mine <<= 1;
-				if (mywprint(d,c)) ++mine; mine <<= 1;
-				if (mywpunct(d,c)) ++mine; mine <<= 1;
-				if (mywspace(d,c)) ++mine; mine <<= 1;
-				if (mywupper(d,c)) ++mine; mine <<= 1;
-				if (mywxdigit(d,c)) ++mine;
+				if (mywalnum(d,c)) { ++mine; } mine <<= 1;
+				if (mywalpha(d,c)) { ++mine; } mine <<= 1;
+				if (mywblank(d,c)) { ++mine; } mine <<= 1;
+				if (mywcntrl(d,c)) { ++mine; } mine <<= 1;
+				if (mywdigit(d,c)) { ++mine; } mine <<= 1;
+				if (mywgraph(d,c)) { ++mine; } mine <<= 1;
+				if (mywlower(d,c)) { ++mine; } mine <<= 1;
+				if (mywprint(d,c)) { ++mine; } mine <<= 1;
+				if (mywpunct(d,c)) { ++mine; } mine <<= 1;
+				if (mywspace(d,c)) { ++mine; } mine <<= 1;
+				if (mywupper(d,c)) { ++mine; } mine <<= 1;
+				if (mywxdigit(d,c)) { ++mine; }
 
-				if (glibc != mine) {
-					verbose_msg("%#8x : glibc %#4x != %#4x mine %d\n", c, glibc, mine, d);
+				if (curr_stdclib != mine) {
+					verbose_msg("%#8x : curr_stdclib %#4x != %#4x mine %d\n", c, curr_stdclib, mine, d);
 					if (c < 0x30000UL) {
 						verbose_msg("sc=%#x u=%#x n=%#x i0=%#x i1=%#x\n", sc, u, n, i0, i1);
 					}
@@ -655,17 +656,17 @@
 				}
 
 				if (towupper(c) != upper) {
-					verbose_msg("%#8x : towupper glibc %#4x != %#4x mine\n",
+					verbose_msg("%#8x : towupper curr_stdclib %#4x != %#4x mine\n",
 						   c, towupper(c), upper);
 				}
 
 				if (towlower(c) != lower) {
-					verbose_msg("%#8x : towlower glibc %#4x != %#4x mine   i0 = %d\n",
+					verbose_msg("%#8x : towlower curr_stdclib %#4x != %#4x mine   i0 = %d\n",
 						   c, towlower(c), lower, i0);
 				}
 
 				if (totitle && ((tt = towctrans(c, totitle)) != upper)) {
-					verbose_msg("%#8x : totitle glibc %#4lx != %#4x mine   i0 = %d\n",
+					verbose_msg("%#8x : totitle curr_stdclib %#4lx != %#4x mine   i0 = %d\n",
 						   c, tt, upper, i0);
 				}
 			}
@@ -681,7 +682,7 @@
 		output_table("ctype", &cttable);
 		output_table("uplow", &ultable);
 
-#warning fix the upper bound on the upper/lower tables... save 200 bytes or so
+/*#warning fix the upper bound on the upper/lower tables... save 200 bytes or so*/
 		printf("#define __LOCALE_DATA_WCuplow_diffs  %7u\n", ul_count);
 		printf("\n#ifdef WANT_WCuplow_diff_data\n\n");
 		printf("\nstatic const short __LOCALE_DATA_WCuplow_diff_data[%zu] = {",
