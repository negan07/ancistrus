--- D7000_V1.0.1.84_WW_src/Source/Makefile
+++ D7000_V1.0.1.84_WW_src/Source/Makefile
@@ -1,14 +1,6 @@
-#
-#	<MODULE> serial product makefile 
-#	Usage:  make [TARGET] [ANNEX] [VER] [MODULE] [HW_ID] [UR2]
-#
 include Rules.mak
 
-
 ifeq ($(BOOT_NAND_FLASH),1)
-#BRCM_CHIP = 6362
-#CFE_ROM_FILE = $(TARGET_HOME)/cfe/cfe$(BRCM_CHIP)rom.nand.bin
-#include $(TARGET_HOME)/../Kernel/bcm963xx/make.common
 FLASH_NAND_CFEROM_FS_IMAGE_NAME_16 = $(CHIP_VENDOR)$(PROFILE)_nand_cferom_fs_image_16
 FLASH_NAND_FS_IMAGE_NAME_16 = $(CHIP_VENDOR)$(PROFILE)_nand_fs_image_16
 FLASH_NAND_CFEROM_FS_IMAGE_NAME_128 = $(CHIP_VENDOR)$(PROFILE)_nand_cferom_fs_image_128
@@ -19,30 +11,18 @@ FLASH_NAND_BLOCK_SIZE=$(FLASH_NAND_BLOCK
 ifeq ($(FLASH),128M)
 FLASH_NAND_BLOCK_SIZE=$(FLASH_NAND_BLOCK_128KB)
 endif
-
 endif
 
-#TOOL_CHAIN_DIR = /opt/toolchains/uclibc-crosstools/bin
-#TOOL_CHAIN_DIR = /$(TARGET_HOME)/tools/mips-linux-uclibc/bin
 TOOL_CHAIN_DIR = /opt/toolchains/crosstools-arm-gcc-4.6-linux-3.4-uclibc-0.9.32-binutils-2.21-NPTL/usr/bin
  
 export TARGET_HOME 
 
 export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin:$(TOOL_CHAIN_DIR)
-
+WORK_DIR_NAME=$(notdir $(THIRD_PARTY_DIR))
 PROJ_DIR_KERNEL=../Kernel/bcm963xx
 PROJ_DIR_KERNEL_SRC=../Kernel/bcm963xx/kernel/linux-3.4rt
 PROJ_BIN_KERNEL=vmlinux.lz
 
-PROJ_DIR_LOADER=../BootCode/bcm963xx_cfe
-
-PROJ_BIN_LOADER=cfe$(CHIP_ID)_$(HW_ID).bin
-DPF_BIN=dpf.cfg
-
-LOADER = $(LOADER_DIR)/$(PROJ_BIN_LOADER)
-KERNEL=$(KERNEL_DIR)/$(PROJ_BIN_KERNEL)
-DPF = $(DPF_DIR)/$(DPF_BIN)
-
 #need not add WW in version for WW release
 ifeq ($(REGION),WW)
 	VERSION=V$(VER)_$(SUB_VER)
@@ -52,305 +32,212 @@ else
 	ETCVERSION=$(ANNEX)$(VER)_$(SUB_VER)$(REGION)
 endif
 
-ifeq ($(VPN),1)
-	IMG_NAME=$(IMAGE_DIR)/$(BOARD_ID)-$(VERSION)_VPN.img
-	IMG_NAME_GPL=$(BOARD_ID)-$(VERSION)_VPN.img
-	BIN_NAME=$(IMAGE_DIR)/$(BOARD_ID)-$(VERSION)_VPN.bin
-else
-	IMG_NAME=$(IMAGE_DIR)/$(BOARD_ID)-$(VERSION).img
-	IMG_NAME_GPL=$(BOARD_ID)-$(VERSION).img
-	BIN_NAME=$(IMAGE_DIR)/$(BOARD_ID)-$(VERSION).bin
-endif
+IMG_NAME=$(BOARD_ID)-$(VERSION).img
 
+all: $(WORK_DIR_NAME)
 
-ifeq ($(BRIDGE),1)
-	FUNC = 01
-endif
+orig: clean_img clean_target pre_fs uclibc apps drivers prefs fs img
 
-ifeq ($(MULTI_PVC),1)
-	FUNC = 03
-endif
-
-PID=$(FIRMWARE_DIR)/PID_$(VERSION)
-
-all: build_test
+$(WORK_DIR_NAME): clean_img clean_target pre_fs uclibc apps drivers third-party prefs fs img
 
-build_test: pre_fs apps drivers prefs fs img
+clean_all: clean_uclibc clean_apps clean_third-party clean_target clean_img
 
-build_image: clean build_target pid build_dpf fs img bin
+clean: clean_target
 
-.PHONY: prepare target apps drivers ui
+.PHONY: apps drivers
 
 pre_fs:
 	rm -rf target
 	tar jxf target.tar.bz2
-	cp -af $(CROSS_DIR_LIB)/*.so* target/lib
-	cp -af $(CROSS_DIR_USR_LIB)/*.so* target/lib
-	rm -rf target/lib/libgcc_s.so
-	rm -rf target/lib/libstdc++.so.6.0.16-gdb.py
-	rm -rf target/lib/libconfig.so
-	rm -rf target/lib/libcrypto.so
+	cp -af $(CROSS_DIR_LIB)*.so* target/lib
+	cp -af $(CROSS_DIR_USR_LIB)*.so* target/lib
+	rm -rf target/lib/libgcc_s.so target/lib/libstdc++.so.*-gdb.py target/lib/libconfig.so target/lib/libcrypto.so
 	$(STRIP) target/lib/*.so*
-	cp -af $(CROSS_DIR_LIB)/libgcc_s.so target/lib
-	cp -af $(CROSS_DIR_USR_LIB)/libstdc++.so.6.0.16-gdb.py target/lib
+	cp -af $(CROSS_DIR_LIB)libgcc_s.so target/lib
 	cd target/lib; ln -sf libscnvram.so libconfig.so
-ifeq ($(ITUNES_SERVER),1)
-	make -C uClibc-0.9.32/
-	cp -af uClibc-0.9.32/lib/ld-uClibc-0.9.32.so target/lib/
-endif
-
-prepare:
-	# tools
-	make -C $(HOSTTOOLS_DIR)
-	make -C $(IMAGE_DIR)/tools
-	# check fakeroot exist or not?
-	@if [ $(firstword $(shell fakeroot -v) xxx) != "fakeroot" ]; then      \
-	    echo "Need fakeroot support. Please install it" ; \
-	    echo "You can get it from image/tools/src" ; \
-	    exit 1;                     \
-	else                            \
-	    echo "fakeroot OK";         \
+	$(foreach D, \
+	target/opt/leafp2p target/opt/rcagent target/opt/rcagent/cgi target/opt/rcagent/scripts target/opt/remote target/opt/xagent \
+	target/usr/sbin target/usr/sbin/rc_app target/www.eng/cgi-bin, \
+	for F in `ls -A $D`; do \
+	if [ -x $D/$$F ] && [ ! -d $D/$$F ] && [ ! -L $D/$$F ] \
+	&& [ -z "`echo $$F | grep "\.so"`" ] && [ -z "`echo $$F | grep "\.sh"`" ]; then \
+	$(SSTRIP) $D/$$F; fi; done;)
+	$(SSTRIP) target/opt/rcagent/downloader
+	@echo -e "\\e[35mSOURCE: PRE_FS \\e[36mgarbage orphans cleanup\\e[0m"
+	-find $(FS_DIR) -type c -name "spu" -exec rm -f '{}' \; >/dev/null 2>&1
+	-@$(foreach L, "import_ca.cgi" "upgrade_driver.cgi" "upgrade_stringTbl.cgi", find $(FS_DIR) -type l -name $(L) -exec rm -f '{}' \; >/dev/null 2>&1;)
+	-@$(foreach F, "*.gz" "*DGND*.jpg" "rcS.MT" "prepare_3g" "ipsec_init_conn.sh" "spuctl" "telnetenabled" "speedtest*" "libspuctl.so" "ipt_vpntrigger.ko" "vw_*" "vpn_*" "tree*" "sub_*" "sh_*" "media*" "h_vpn*" "h_vauto*" "h_vman*" "index1.htm" "start1.htm" "*_demo.htm" "start_old_style.htm" "ORG-RST_status.htm" "DSL_PRO_config.html" "*3g*.htm" "adsl_test.htm" "StringTableUpload.html" "alert*" "at_cmd_log.htm" "choose_wan*" "debug*" "dongle_list.htm" "hidden.htm" "*lanip_mo*" "*odem*" "*mstatus*" "LGO_logout.htm" "menu*.htm" "m_status.htm" "ORG-index.htm" "TR069.htm" "*driver*" "wiz_failover.htm" "wiz_selwan.htm" "wiz_summary.htm" "md5" "utility_dlna.js", find $(FS_DIR) -type f -name $(F) -exec rm -f '{}' \;;)
+	@echo -e "\\e[35mSOURCE: PRE_FS \\e[36mduplicate removal\\e[0m"
+	ln -sf nbtscan $(FS_DIR)/usr/sbin/nbtscan_refresh
+	ln -sf nvram $(FS_DIR)/usr/sbin/readycloud_nvram
+	ln -sf wizard_eth $(FS_DIR)/usr/sbin/wizard_vdsl
+	ln -sf DNS_ddns_st.htm $(FS_DIR)/www.eng/Netgear_ddns_st.htm
+	ln -sf WIZ_pppoa.htm $(FS_DIR)/www.eng/wizpppoa.htm
+	ln -sf BAS_pppoe_h.htm $(FS_DIR)/www.eng/BAS_pppoa_h.htm
+	ln -sf BRS_04_B_checkNet_ping.html $(FS_DIR)/www.eng/BRS_04_B_checkNet.html
+	ln -sf upgrade.htm $(FS_DIR)/www.eng/UPG_upgrade.htm
+	ln -sf dtreebase.gif $(FS_DIR)/www.eng/rout.gif
+	ln -sf image/spacer.gif $(FS_DIR)/www.eng/spacer.gif
+	ln -sf button/button.gif $(FS_DIR)/www.eng/image/ca_purple_long_button.gif
+	ln -sf button/test.gif $(FS_DIR)/www.eng/image/ca-little-purple-button.gif
+	@echo -e "\\e[35mSOURCE: PRE_FS \\e[36mimages conversion\\e[0m"
+	mogrify -format jpg $(FS_DIR)/www.eng/image/apmodelink.jpg
+ifeq ($(ANNEX),A)
+	-@$(foreach D, "CSY" "TUR" , find $(FS_DIR) -type d -name $(D) -exec rm -rf '{}' \; >/dev/null 2>&1;)
+	-@$(foreach F, "Czech.js" , find $(FS_DIR) -type f -name $(F) -exec rm -f '{}' \;;)
+else
+	-@$(foreach D, "CHS" "ITA" "KOR" "ESP", find $(FS_DIR) -type d -name $(D) -exec rm -rf '{}' \; >/dev/null 2>&1;)
+	-@$(foreach F, "Chinese.js" "Italian.js" "Korean.js" "Spanish.js", find $(FS_DIR) -type f -name $(F) -exec rm -f '{}' \;;)
+endif
+
+uclibc:
+	@echo -e "\\e[35mSOURCE: make \\e[36mUCLIBC \\e[0m"
+	@if [ ! -f uClibc-0.9.32/.compiled ]; then \
+	$(MAKE) UCLIBC_EXTRA_CFLAGS="$(UCLIBC_EXTRA_CFLAGS)" -C uClibc-0.9.32/ -s || exit 1; \
+	touch uClibc-0.9.32/.compiled; \
 	fi
+	@cp -af uClibc-0.9.32/lib/ld-uClibc-0.9.32.so target/lib/
 
 apps:
-	@echo -e "\\e[35mSOURCE: make \\e[36mAPPS \\e[0m"		
-	$(MAKE) -C $(APPS_DIR) 
-	$(MAKE) -C $(APPS_DIR) install 
-	
+	@echo -e "\\e[35mSOURCE: make \\e[36mAPPS \\e[0m"
+	@if [ ! -f $(APPS_DIR)/.compiled ]; then \
+	$(MAKE) -C $(APPS_DIR) || exit 1; \
+	touch $(APPS_DIR)/.compiled; \
+	fi
+	$(MAKE) -C $(APPS_DIR) install
+
 drivers:
-	@echo -e "\\e[35mSOURCE: make \\e[36mdrivers \\e[0m"
-	cd $(PROJ_DIR_KERNEL); make sc_driver SC_BUILD=1 SC_ROOT=$(ROOT)
+	@echo -e "\\e[35mSOURCE: make \\e[36mDRIVERS \\e[0m"
+	$(MAKE) SC_BUILD=1 SC_ROOT=$(ROOT) -C $(PROJ_DIR_KERNEL) sc_driver -s
 
 third-party:
 	@echo -e "\\e[35mSOURCE: make \\e[36mTHIRD PARTY \\e[0m"
+	$(MAKE) -C $(THIRD_PARTY_DIR) opkg-local
 	$(MAKE) -C $(THIRD_PARTY_DIR)
-	$(MAKE) -C $(THIRD_PARTY_DIR)	install
+	$(MAKE) BUILD=1 MONOLITHIC=1 -C $(THIRD_PARTY_DIR) monolithic
 
-	
-ui:
-	@echo -e "\\e[35mSOURCE: make \\e[36mUI \\e[0m"	
-	$(MAKE) -C $(UI_DIR) -s	
-
-	
 #
-# Generate files in target/ before make squash image
-# Currently we generate these files:
-# svn.info/version/md5/currentsetting.htm/pid
+# Generate files in target/ before making img
+# Currently we append/generate these files:
+# svn.info/currentsetting.htm/version
 #
 SVN_INFO=$(FS_DIR)/usr/etc/svn.info
 CUR_SETTING=$(FS_DIR)/www.eng/currentsetting.htm
-PID=$(IMAGE_DIR)/$(BOARD_ID).pid
-LANG_PID=$(IMAGE_DIR)/$(BOARD_ID)_lang.pid
-MAKE_PID=$(IMAGE_DIR)/tools/src/make_PID/make_PID
 FW_INFO=$(IMAGE_DIR)/$(BOARD_ID).info
 
 ifeq ($(MTCODE),1)
-IMG_NAME=$(IMAGE_DIR)/$(BOARD_ID)-V$(VER)_$(SUB_VER)_MT.img
+IMG_NAME=$(BOARD_ID)-V$(VER)_$(SUB_VER)_MT.img
 endif
 
-prefs:
-	# Generate version
-	echo $(ETCVERSION) > $(FS_DIR)/usr/etc/version	
+WORK_PROJECT=$(shell cd ../..; basename -s .git `git config --get remote.origin.url` || basename `pwd` | tr -d -c [:alpha:];)
+WORK_WWW=$(shell cd ../..; git config --get remote.origin.url || echo "localhost";)
+WORK_AUTHOR=$(shell [ -n "$${SUDO_USER}" ] && echo $${SUDO_USER} || echo $${USERNAME})
+WORK_AUTHOR_EMAIL=$(shell cd ../..; MAIL=`git log --max-count=1 --pretty='format:%ae' | grep $(WORK_AUTHOR)`; [ -n "$${MAIL}" ] && echo $${MAIL} || echo "email@void.com";)
+WORK_VER=$(shell cd ../..; git rev-list --count HEAD || basename `pwd` | tr -d -c [:digit:];)
+BUILDING_DATE=$(shell date -u '+%Y-%m-%d %H:%M')
 
-	# Generate md5
-	cd $(FS_DIR);\
-	echo Firmware version: $(VERSION) > www.eng/md5;\
-	find -type f -exec md5sum {} >> www.eng/md5 \;;\
-	cd -;
+ifneq ($(ORIG),1)
+IMG_NAME=$(BOARD_ID)-$(VERSION)-$(WORK_PROJECT)_$(WORK_AUTHOR)-build-$(WORK_VER).img
+endif
 
+prefs:
+	@echo -e "\\e[35mSOURCE: make \\e[36mPREFS \\e[0m"
+	# Remove static libs & void dirs
+	@echo -e "\\e[35mSOURCE: PREFS \\e[36mgarbage static libs & dirs cleanup\\e[0m"
+	-@$(foreach D, ".svn" "naptd" "pkgconfig" "local" "upnp", find $(FS_DIR) -type d -name $(D) -exec rm -rf '{}' \; >/dev/null 2>&1;)
+	-@find $(FS_DIR) -type f -name "lib*.*a" -exec rm -f '{}' \;
+ifneq ($(ORIG),1)
+	# $(WORK_PROJECT) $(SVN_INFO) additions...
+	echo "" >> $(SVN_INFO)
+	echo "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #" >> $(SVN_INFO)
+	echo "" >> $(SVN_INFO)
+	echo "Project Name: $(WORK_PROJECT)" >> $(SVN_INFO)
+	echo "Homepage: $(WORK_WWW)" >> $(SVN_INFO)
+	echo "Revision Author: $(WORK_AUTHOR)" >> $(SVN_INFO)
+	echo "Email: $(WORK_AUTHOR_EMAIL)" >> $(SVN_INFO)
+	echo "Build Revision Author Number: $(WORK_VER)" >> $(SVN_INFO)
+	echo "Building Date: $(BUILDING_DATE) UTC" >> $(SVN_INFO)
+endif
 	# Generate currentsetting.htm
-	# For test, smartwizard CD request Model name is "WNR2000v2"
-	echo "Firmware="V$(VER)_$(SUB_VER)"@netgear_region#" > $(CUR_SETTING)
-	echo "RegionTag="$(BOARD_ID)_"@netgear_region#" >>  $(CUR_SETTING)
-	echo "Region=@netgear_region#"  >> $(CUR_SETTING)
-	#echo "Model="$(BOARD_ID)  >> $(CUR_SETTING)
-	echo "Model="$(BOARD_ID)  >> $(CUR_SETTING)
+	echo "Firmware=@fw_version#&#8203;@netgear_region#" > $(CUR_SETTING)
+	echo "RegionTag=@model_name#_@netgear_region#" >>  $(CUR_SETTING)
+	echo "Region=@netgear_region#" >> $(CUR_SETTING)
+	echo "Model=@model_name#" >> $(CUR_SETTING)
 	echo "InternetConnectionStatus=@if_wan_up#" >> $(CUR_SETTING)
 	if [ "$(OPENDNS)" == "1" ]; then echo "ParentalControlSupported=1" >> $(CUR_SETTING); fi
-	echo "SOAPVersion=2.00" >> $(CUR_SETTING)
-	echo "ReadyShareSupportedLevel=13" >> $(CUR_SETTING)
-	
+	if [ "$(SOAP_V2)" == "1" ]; then echo "SOAPVersion=2.00" >> $(CUR_SETTING); fi
+	echo "ReadyShareSupportedLevel=@readysharesupportlevel#" >> $(CUR_SETTING)
+	if [ "$(XCLOUD)" == "1" ]; then echo "XCloudSupported=1" >> $(CUR_SETTING); fi
+	echo "LoginMethod=2.0" >> $(CUR_SETTING)
+	# Generate version
+	echo $(ETCVERSION) > $(FS_DIR)/usr/etc/version
 	# Generate fw info which will bind to trx file
 	echo $(VERSION) > $(FW_INFO)
 	echo $(REGION) >> $(FW_INFO)
-	
-ifeq ($(3G_FEATURE),1)
-	cat $(APPS_DIR)/etc/prepare_3g >> $(TARGET_DIR)/usr/etc/rcS
-endif
-	
-	
-build_target: 
-	tar  xfz $(TARGET_HOME)/target.tgz 
-
-	svn info > $(TARGET_HOME)/target/usr/etc/svn.info
-
-	@echo -e "\\e[35mSOURCE: make \\e[36mTOOL_CHAINS \\e[0m"
-#	$(MAKE) -C $(TOOLS_DIR) 
-
-# start svn info
-	@export LANG=en_US.UTF-8; svn info > $(FS_DIR)/usr/etc/svn.info
-	@echo "VER:" $(VERSION) >> $(FS_DIR)/usr/etc/svn.info
-	@echo "Build from:" $(shell hostname) `pwd` >> $(FS_DIR)/usr/etc/svn.info
-	@export LANG=en_US.UTF-8; echo DATE: `date`  >> $(FS_DIR)/usr/etc/svn.info
-	@echo "BOARD_ID:" $(BOARD_ID) >> $(FS_DIR)/usr/etc/svn.info
-	@echo "Boot Loader CFE version 1.0.37-12.1 for BCM9$(CHIP_ID) (32bit,SP,BE)" >> $(TARGET_HOME)/target/usr/etc/svn.info
-# end svn info
-
-	cp -a $(APPS_DIR)/etc/* $(TARGET_HOME)/target/usr/etc
-
-	@echo -e "\\e[35mSOURCE: make \\e[36mAPPS \\e[0m"		
-	$(MAKE) -C $(APPS_DIR) -s
-	$(MAKE) -C $(APPS_DIR) install 
-	@echo -e "\\e[35mSOURCE: make \\e[36mdrivers \\e[0m"
-	cd $(PROJ_DIR_KERNEL); make sc_driver SC_BUILD=1 SC_ROOT=$(ROOT)
-
-	@echo -e "\\e[35mSOURCE: make \\e[36mUI \\e[0m"	
-	$(MAKE) -C $(UI_DIR) -s	
-	echo $(ETCVERSION) > $(FS_DIR)/usr/etc/version	
-
-	cd ${FS_DIR};\
-	echo Firmware version: $(VERSION) > www.eng/md5;\
-	find -type f -exec md5sum {} >> www.eng/md5 \;;\
-	cd -;
-
-	echo "Firmware="$(VERSION) > $(FS_DIR)/www.eng/currentsetting.htm
-	echo "RegionTag=$(BOARD_ID)_WW" >>  $(FS_DIR)/www.eng/currentsetting.htm
-	echo "Region=ww"  >> $(FS_DIR)/www.eng/currentsetting.htm
-	echo "Model="$(BOARD_ID)  >> $(FS_DIR)/www.eng/currentsetting.htm
-	echo "InternetConnectionStatus=Up" >> $(FS_DIR)/www.eng/currentsetting.htm
-
-lang_pid:
-    # Generate language pid
-	$(MAKE_PID) $(HW_ID) $(ANNEX)$(GUI_VER) $(PRODUCT_ID) $(LANG_PID)
-	
-langpkg: lang_pid
-# Generate GUI language file. 
-	-rm -rf $(IMAGE_DIR)/languages
-	cp -af $(IMAGE_DIR)/EMPTY $(IMAGE_DIR)/languages
-	chmod a+x gen_lang.sh
-ifeq ($(GENIE_GUI),1)
-	./gen_lang.sh ./UI/dgnd3700v2_genie/www.multi_v2.3/langs  || exit 1
-else
-	./gen_lang.sh ./UI/wnr2500_multi/www.multi_v2.3/langs  || exit 1
-endif
-
-
-# Geneate filesystem image from target
-FAKEROOT_SH=$(ROOT)/fakeroot.sh
 
 fs:
+	@echo -e "\\e[35mSOURCE: make \\e[36mFS \\e[0m"
 	$(STRIP) -d target/lib/modules/*.ko
-	@echo -e "\\e[35mSOURCE: make \\e[36mFS \\e[0m"	
 ifeq ($(BOOT_NAND_FLASH),1)
-#ifeq ($(US_ONLY),0)
-	#cp -f bcm4360_map.bin $(FS_DIR)/usr/etc/wlan/
-#endif
-	-./makeDevs
-	cp -f $(TARGET_HOME)/../Kernel/bcm963xx/vmlinux.lz $(KERNEL)
-	cp $(KERNEL) $(FS_DIR)/.
+	cp -f $(TARGET_HOME)/$(PROJ_DIR_KERNEL)/$(PROJ_BIN_KERNEL) $(FS_DIR)/.
 	chmod +x $(IMAGE_DIR)/sc_crc32
-	$(IMAGE_DIR)/sc_crc32 $(FS_DIR)/vmlinux.lz $(FS_DIR)/kernel_cksum
-	echo -e "/vmlinux.lz" > $(TARGET_HOME)/nocomprlist
+	$(IMAGE_DIR)/sc_crc32 $(FS_DIR)/$(PROJ_BIN_KERNEL) $(FS_DIR)/kernel_cksum
+	echo -e /$(PROJ_BIN_KERNEL) > $(TARGET_HOME)/nocomprlist
 	echo -e "/kernel_cksum" >> $(TARGET_HOME)/nocomprlist
-	mkdir -p -m 777 $(FS_DIR)/config/factory
-	mkdir -p -m 777 $(FS_DIR)/config/nvram
-	mkdir -p -m 777 $(FS_DIR)/config/language_ENU
-	mkdir -p -m 777 $(FS_DIR)/config/language_DEU
-	mkdir -p -m 777 $(FS_DIR)/config/language_RUS
-	mkdir -p -m 777 $(FS_DIR)/config/language_FRA
-	mkdir -p -m 777 $(FS_DIR)/config/language_NLD
-	mkdir -p -m 777 $(FS_DIR)/config/language_SVE
-ifeq ($(ANNEX),B)	
-	mkdir -p -m 777 $(FS_DIR)/config/language_CSY
-	mkdir -p -m 777 $(FS_DIR)/config/language_TUR
+	@echo -e "\\e[35mSOURCE: FS \\e[36mcreating CONFIG dirs\\e[0m"
+	@$(foreach D, "factory" "nvram" "xxx", mkdir -p -m 755 $(FS_DIR)/config/$(D);)
+ifeq ($(ANNEX),A)
+	@$(foreach D, "ENU" "DEU" "RUS" "FRA" "NLD" "SVE" "CHS" "ITA" "KOR" "ESP", mkdir -p -m 755 $(FS_DIR)/config/language_$(D);)
 else
-	mkdir -p -m 777 $(FS_DIR)/config/language_CHS
-	mkdir -p -m 777 $(FS_DIR)/config/language_ITA
-	mkdir -p -m 777 $(FS_DIR)/config/language_KOR
-	mkdir -p -m 777 $(FS_DIR)/config/language_ESP
-endif	
-	mkdir -p -m 777 $(FS_DIR)/config/xxx
-	chmod 777 $(FS_DIR)/config
-#	chmod -w $(FS_DIR)/usr/etc/fstab
-#	ls -l $(DPF)
-#	cp -f $(DPF) $(FS_DIR)/.
-	$(HOSTTOOLS_DIR)/mkfs.jffs2 -l -p -n -e $(FLASH_NAND_BLOCK_SIZE) -r $(FS_DIR) -o $(IMAGE_DIR)/rootfs.img -N $(TARGET_HOME)/nocomprlist
-	$(HOSTTOOLS_DIR)/mkfs.jffs2 -l -p -n -e $(FLASH_NAND_BLOCK_SIZE) -r $(IMAGE_DIR)/EMPTY -o $(IMAGE_DIR)/empty.img -N $(TARGET_HOME)/nocomprlist
-	$(HOSTTOOLS_DIR)/mkfs.jffs2 -l -p -n -e $(FLASH_NAND_BLOCK_SIZE) -r $(IMAGE_DIR)/languages -o $(IMAGE_DIR)/langpkg.img -N $(TARGET_HOME)/nocomprlist
-	rm $(TARGET_HOME)/nocomprlist
-else
-	-./makeDevs
-	echo "$(HOSTTOOLS_DIR)/mksquashfs $(FS_DIR) $(FS_NAME) -noappend -be -all-root -b 65536" > $(FAKEROOT_SH)
-	chmod +x $(FAKEROOT_SH)
-	$(HOSTTOOLS_DIR)/fakeroot/fakeroot $(FAKEROOT_SH)
-	cp -f $(PROJ_DIR_KERNEL)/$(PROJ_BIN_KERNEL) $(KERNEL)
-	$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(IMAGE_DIR)/bcm963xx_fs_kernel --chip $(CHIP_ID) --board "963281TAN" --blocksize $(BLOCKSIZE) --image-version 4101GW0701531 --cfefile $(LOADER) --rootfsfile $(FS_NAME) --kernelfile $(KERNEL) 
-#	$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(IMAGE_DIR)/bcm963xx_fs_kernel --chip $(CHIP_ID) --board "9$(CHIP_ID)GW" --blocksize $(BLOCKSIZE) --cfefile $(LOADER) --rootfsfile $(FS_NAME) --kernelfile  $(KERNEL)
-#	rm -f $(FS_NAME)
+	@$(foreach D, "ENU" "DEU" "RUS" "FRA" "NLD" "SVE" "CSY" "TUR", mkdir -p -m 755 $(FS_DIR)/config/language_$(D);)
+endif
+	chmod 755 $(FS_DIR)/config
+	@echo -e "\\e[35mSOURCE: FS \\e[36mcreated\\e[0m"
 endif
-
 
 img:
-	@echo -e "\\e[35mSOURCE: make \\e[36mIMG \\e[0m"	
+	@echo -e "\\e[35mSOURCE: make \\e[36mIMG \\e[0m"
 ifeq ($(BOOT_NAND_FLASH),1)
-#	cd $(IMAGE_DIR); \
-#	dd if=/dev/zero of=file128k.tmp bs=1k count=128; \
-#	cat $(CFE_ROM_FILE)  file128k.tmp | head --bytes=$(FLASH_NAND_BLOCK_SIZE) > cferom.tmp; 
-#	cd $(IMAGE_DIR) ; cp $(BOARD_ID)_$(FLASH).par $(BOARD_ID).par; ./bb $(BOARD_ID)
-	cd $(IMAGE_DIR) ; ./bb $(BOARD_ID)
-	cd $(IMAGE_DIR) ; ./bb_dual $(BOARD_ID)_dual
-	cd $(IMAGE_DIR) ; cp $(BOARD_ID).img $(IMG_NAME) -f
-	@echo
-	@echo -e "Done! Image $(BOARD_ID).img has been built in $(IMAGE_DIR)."
+	$(HOSTTOOLS_DIR)/mkfs.jffs2 -l -p -n -e $(FLASH_NAND_BLOCK_SIZE) -r $(FS_DIR) -o $(IMAGE_DIR)/rootfs.img -N $(TARGET_HOME)/nocomprlist
+	@$(foreach L, "ENU" "DEU" "RUS" "FRA" "NLD" "SVE" "CHS" "ITA" "KOR" "ESP" "CSY" "TUR", \
+	mkdir -p -m 755 $(IMAGE_DIR)/languages/language_$(L); \
+	cp $(IMAGE_DIR)/languages/$(L) $(IMAGE_DIR)/languages/language_$(L)/lang || exit 1; \
+	cp $(IMAGE_DIR)/languages/ready $(IMAGE_DIR)/languages/language_$(L)/ || exit 1; \
+	$(HOSTTOOLS_DIR)/mkfs.jffs2 -l -p -n -e $(FLASH_NAND_BLOCK_SIZE) -r $(IMAGE_DIR)/languages/language_$(L) -o $(IMAGE_DIR)/langpkg_$(L).img -N $(TARGET_HOME)/nocomprlist;)
+ifneq ($(ORIG),1)
+	$(HOSTTOOLS_DIR)/mkfs.jffs2 -l -p -n -e $(FLASH_NAND_BLOCK_SIZE) -r $(IMAGE_DIR)/init.d -o $(IMAGE_DIR)/init.d.img -N $(TARGET_HOME)/nocomprlist
+	$(HOSTTOOLS_DIR)/mkfs.jffs2 -l -p -n -e $(FLASH_NAND_BLOCK_SIZE) -r $(IMAGE_DIR)/opkg -o $(IMAGE_DIR)/opkg.img -N $(TARGET_HOME)/nocomprlist
+	$(HOSTTOOLS_DIR)/mkfs.jffs2 -l -p -n -e $(FLASH_NAND_BLOCK_SIZE) -r $(IMAGE_DIR)/EMPTY -o $(IMAGE_DIR)/xxx.img -N $(TARGET_HOME)/nocomprlist
+	cp -f $(IMAGE_DIR)/$(BOARD_ID).par.$(WORK_DIR_NAME) $(IMAGE_DIR)/$(BOARD_ID).par
 else
-#ifeq ($(FLASH),2M)
-#	$(FIRMWARE_DIR)/makeImage_2M  $(IMG_NAME) $(LOADER) $(IMAGE_DIR)/bcm963xx_fs_kernel $(PID)
-#else
-#ifeq ($(FLASH),8M)
-#	$(FIRMWARE_DIR)/makeImage_8M  $(IMG_NAME) $(LOADER) $(IMAGE_DIR)/bcm963xx_fs_kernel $(PID) $(DPF)
-#else
-#ifeq ($(FLASH),16M)
-#	$(FIRMWARE_DIR)/makeImage_16M  $(IMG_NAME) $(LOADER) $(IMAGE_DIR)/bcm963xx_fs_kernel $(PID) $(DPF)
-#else
-#	$(FIRMWARE_DIR)/makeImage_4M  $(IMG_NAME) $(LOADER) $(IMAGE_DIR)/bcm963xx_fs_kernel $(PID)
-#endif
-#endif
-#endif
-#	cp -af $(IMG_NAME) $(IMAGE_DIR)/$(BOARD_ID).img
-	cp -af $(IMAGE_DIR)/bcm963xx_fs_kernel $(IMAGE_DIR)/$(BOARD_ID).img
-# check FW size
-#	$(TOOLS_DIR)/file_size_check.sh $(IMG_NAME) $(IMG_SIZE_MAX)
-endif
-ifeq ($(ZIP_3G),1)
-	make zip3g
+	cp -f $(IMAGE_DIR)/$(BOARD_ID).par.orig $(IMAGE_DIR)/$(BOARD_ID).par
 endif
-
-
-
-ifeq ($(ZIP_3G),1)
-ZIP3G_DIR=$(IMAGE_DIR)/zip3g
-ZIP3GFS_DIR=$(ZIP3G_DIR)/rootfs
-zip3g:
-	@rm -rf $(ZIP3GFS_DIR)
-	@mkdir -p $(ZIP3GFS_DIR)
-	@cp $(ROOT)/target/usr/etc/dongle_mgnt	   $(ZIP3GFS_DIR)
-	@cp $(ROOT)/target/usr/etc/dongle_monitor  $(ZIP3GFS_DIR)
-	@cp $(ROOT)/target/lib/modules/usbserial.ko $(ZIP3GFS_DIR)
-# create filesystem
-	@$(HOSTTOOLS_DIR)/mkfs.jffs2 -b -p -n -e $(FLASH_NAND_BLOCK_SIZE) -r $(ZIP3GFS_DIR) -o $(ZIP3G_DIR)/zip3g.img
-#	@cd $(ZIP3G_DIR) && $(MAKESQUASHFS) $(ZIP3GFS_DIR) zip3g.img -be -noappend -b 32768
-#	create PID bin image file.
-	cd $(ZIP3G_DIR) && ./zip3g.sh
+	rm $(TARGET_HOME)/nocomprlist
+	cd $(IMAGE_DIR) ; ./bb $(BOARD_ID) || exit 1
+	cd $(IMAGE_DIR) ; cp -f $(BOARD_ID).img ../../../$(IMG_NAME)
+	@echo
+	@echo -e "\\e[35mDone! Image \\e[36m$(IMG_NAME) has been built.\\e[0m"
 endif
 
-burn:
-	cd $(IMAGE_DIR) ; ./nand_small_page_brcm_ecc_tool $(BOARD_ID).burn.bin $(BOARD_ID).bin;
+clean_uclibc:
+	@echo -e "\\e[35mUCLIBC: make \\e[36mclean \\e[0m"
+	-$(MAKE) -C uClibc-0.9.32 clean -s
+	-rm -f uClibc-0.9.32/.compiled
 
+clean_apps:
+	@echo -e "\\e[35mAPPS: make \\e[36mclean \\e[0m"
+	-$(MAKE) -C $(APPS_DIR) clean -s
+	-rm -f $(APPS_DIR)/.compiled
 
-clean:
-	fakeroot rm -rf $(TARGET_HOME)/target
+clean_third-party:
+	@echo -e "\\e[35mTHIRD-PARTY: make \\e[36mclean \\e[0m"
+	-$(MAKE) -C $(THIRD_PARTY_DIR) clean -s
 
-clean_all:
-	-$(MAKE) -C $(APPS_DIR) clean -s
+clean_target:
+	@echo -e "\\e[35mTARGET: \\e[36mclean \\e[0m"
 	-rm -rf $(TARGET_HOME)/target
 
+clean_img:
+	@echo -e "\\e[35mIMG: \\e[36mclean \\e[0m"
+	-rm -rf $(IMAGE_DIR)/rootfs.img $(IMAGE_DIR)/languages/language_* $(IMAGE_DIR)/init.d* $(IMAGE_DIR)/opkg* $(IMAGE_DIR)/empty.img $(IMAGE_DIR)/langpkg_*.img $(IMAGE_DIR)/$(BOARD_ID).par $(IMAGE_DIR)/$(BOARD_ID).info $(IMAGE_DIR)/$(BOARD_ID).zip $(IMAGE_DIR)/$(BOARD_ID).bin $(IMAGE_DIR)/$(BOARD_ID)*.img
+
