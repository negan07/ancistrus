diff -urN work/openssh-8.8p1/Makefile work/openssh-8.8p1/Makefile
--- work/openssh-8.8p1/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ work/openssh-8.8p1/Makefile	2018-01-05 12:00:11.000000000 +0100
@@ -0,0 +1,197 @@
+include ../Rules.mak
+
+BINS			:= $(OPEN_SSH)/sshd $(OPEN_SSH)/ssh-keygen $(OPEN_SSH)/scp
+STARTUP			:= rc_ssh
+PRIOS			:= 10
+PRIOF			:= 10
+WEB			:= ../www/openssh.htm
+SSHD_CONF		:= sshd_config
+SSHD_KEYS_DIR		:= $(NVRAMDIR)/ssh
+SSHD_CONF_INST_DIR	:= $(ETCDIR)
+
+all: config
+	$(MAKE) -C $(OPEN_SSH)
+
+config:
+	@if [ ! -f h_config ]; then \
+	$(MAKE) configure || exit 1; \
+	touch h_config; \
+	fi
+
+configure:
+	cd $(OPEN_SSH) && ./configure --build=$(BUILD_HOST) --host=$(TARGET_NAME) --prefix=$(USRDIR) --sysconfdir=$(TMPETC) --libdir=$(LDLIB) --sharedstatedir=$(LDLIB) --bindir=$(USRSBIN) --sbindir=$(USRSBIN) --libexecdir=$(USRSBIN) --localstatedir=$(VARLIB) --disable-pkcs11 --disable-security-key --disable-etc-default-login --disable-lastlog --disable-utmp --disable-utmpx --disable-wtmp --disable-wtmpx --disable-pututline --disable-pututxline --without-hardening --without-maildir --without-bsd-auth --without-xauth --without-kerberos5 --without-shadow --with-privsep-user=root --with-privsep-path=$(VARLIB)/ssh --with-cflags --with-cflags-after --with-cppflags --with-ldflags --with-ldflags-after --with-libs --with-zlib=$(WORK_DIR)/$(ZLIB)/$(ZLIB) --with-ssl-dir=$(WORK_DIR)/$(OPENSSL)/$(OPENSSL) --with-ssl-engine --with-default-path=/bin:/sbin:$(USRDIR)/bin:$(USRSBIN):$(USRSBINSCR):$(USRSBINRCAPP) --with-superuser-path=/bin:/sbin:$(USRDIR)/bin:$(USRSBIN):$(USRSBINSCR):$(USRSBINRCAPP) --with-pid-dir=$(VARLIB)/run CFLAGS="$(CFLAGS) -Os -s -fcommon" LD=$(CC)
+
+sshd_conf:
+	@echo "#	\$$OpenBSD: sshd_config,v 1.104 2021/07/02 05:11:21 djm Exp \$$" > $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# This is the sshd server system-wide configuration file.  See" >> $(SSHD_CONF)
+	@echo "# sshd_config(5) for more information." >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# This sshd was compiled with PATH=/bin:/sbin:$(USRDIR)/bin:$(USRSBIN):$(USRSBINSCR):$(USRSBINRCAPP)" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# The strategy used for options in the default sshd_config shipped with" >> $(SSHD_CONF)
+	@echo "# OpenSSH is to specify options with their default value where" >> $(SSHD_CONF)
+	@echo "# possible, but leave them commented.  Uncommented options override the" >> $(SSHD_CONF)
+	@echo "# default value." >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "#Port 22" >> $(SSHD_CONF)
+	@echo "#AddressFamily any" >> $(SSHD_CONF)
+	@echo "#ListenAddress 0.0.0.0" >> $(SSHD_CONF)
+	@echo "#ListenAddress ::" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "HostKey $(SSHD_KEYS_DIR)/$(PROJECT).ed25519" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# Ciphers and keying" >> $(SSHD_CONF)
+	@echo "#RekeyLimit default none" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# Logging" >> $(SSHD_CONF)
+	@echo "SyslogFacility AUTH" >> $(SSHD_CONF)
+	@echo "LogLevel INFO" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# Authentication:" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "#LoginGraceTime 2m" >> $(SSHD_CONF)
+	@echo "PermitRootLogin yes" >> $(SSHD_CONF)
+	@echo "#StrictModes yes" >> $(SSHD_CONF)
+	@echo "#MaxAuthTries 6" >> $(SSHD_CONF)
+	@echo "#MaxSessions 10" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "#PubkeyAuthentication yes" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# The default is to check both $(SSHD_KEYS_DIR)/authorized_keys and $(SSHD_KEYS_DIR)/authorized_keys2" >> $(SSHD_CONF)
+	@echo "# but this is overridden so installations will only check $(SSHD_KEYS_DIR)/authorized_keys" >> $(SSHD_CONF)
+	@echo "AuthorizedKeysFile $(SSHD_KEYS_DIR)/authorized_keys" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "#AuthorizedPrincipalsFile none" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "#AuthorizedKeysCommand none" >> $(SSHD_CONF)
+	@echo "#AuthorizedKeysCommandUser nobody" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# For this to work you will also need host keys in $(SSHD_KEYS_DIR)/ssh_known_hosts" >> $(SSHD_CONF)
+	@echo "HostbasedAuthentication yes" >> $(SSHD_CONF)
+	@echo "# Change to yes if you don't trust ~$(SSHD_KEYS_DIR)/known_hosts for" >> $(SSHD_CONF)
+	@echo "# HostbasedAuthentication" >> $(SSHD_CONF)
+	@echo "#IgnoreUserKnownHosts no" >> $(SSHD_CONF)
+	@echo "# Don't read the user's ~/.rhosts and ~/.shosts files" >> $(SSHD_CONF)
+	@echo "#IgnoreRhosts yes" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# To disable tunneled clear text passwords, change to no here!" >> $(SSHD_CONF)
+	@echo "#PasswordAuthentication yes" >> $(SSHD_CONF)
+	@echo "#PermitEmptyPasswords no" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# Change to no to disable s/key passwords" >> $(SSHD_CONF)
+	@echo "#ChallengeResponseAuthentication yes" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# Kerberos options" >> $(SSHD_CONF)
+	@echo "#KerberosAuthentication no" >> $(SSHD_CONF)
+	@echo "#KerberosOrLocalPasswd yes" >> $(SSHD_CONF)
+	@echo "#KerberosTicketCleanup yes" >> $(SSHD_CONF)
+	@echo "#KerberosGetAFSToken no" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# GSSAPI options" >> $(SSHD_CONF)
+	@echo "#GSSAPIAuthentication no" >> $(SSHD_CONF)
+	@echo "#GSSAPICleanupCredentials yes" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# Set this to 'yes' to enable PAM authentication, account processing," >> $(SSHD_CONF)
+	@echo "# and session processing. If this is enabled, PAM authentication will" >> $(SSHD_CONF)
+	@echo "# be allowed through the ChallengeResponseAuthentication and" >> $(SSHD_CONF)
+	@echo "# PasswordAuthentication.  Depending on your PAM configuration," >> $(SSHD_CONF)
+	@echo "# PAM authentication via ChallengeResponseAuthentication may bypass" >> $(SSHD_CONF)
+	@echo "# the setting of \"PermitRootLogin without-password\"." >> $(SSHD_CONF)
+	@echo "# If you just want the PAM account and session checks to run without" >> $(SSHD_CONF)
+	@echo "# PAM authentication, then enable this but set PasswordAuthentication" >> $(SSHD_CONF)
+	@echo "# and ChallengeResponseAuthentication to 'no'." >> $(SSHD_CONF)
+	@echo "#UsePAM no" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "#AllowAgentForwarding yes" >> $(SSHD_CONF)
+	@echo "#AllowTcpForwarding yes" >> $(SSHD_CONF)
+	@echo "#GatewayPorts no" >> $(SSHD_CONF)
+	@echo "#X11Forwarding no" >> $(SSHD_CONF)
+	@echo "#X11DisplayOffset 10" >> $(SSHD_CONF)
+	@echo "#X11UseLocalhost yes" >> $(SSHD_CONF)
+	@echo "#PermitTTY yes" >> $(SSHD_CONF)
+	@echo "#PrintMotd yes" >> $(SSHD_CONF)
+	@echo "#PrintLastLog yes" >> $(SSHD_CONF)
+	@echo "#TCPKeepAlive yes" >> $(SSHD_CONF)
+	@echo "#PermitUserEnvironment no" >> $(SSHD_CONF)
+	@echo "#Compression delayed" >> $(SSHD_CONF)
+	@echo "#ClientAliveInterval 0" >> $(SSHD_CONF)
+	@echo "#ClientAliveCountMax 3" >> $(SSHD_CONF)
+	@echo "#UseDNS no" >> $(SSHD_CONF)
+	@echo "#PidFile $(VARLIB)/run/sshd.pid" >> $(SSHD_CONF)
+	@echo "#MaxStartups 10:30:100" >> $(SSHD_CONF)
+	@echo "#PermitTunnel no" >> $(SSHD_CONF)
+	@echo "#ChrootDirectory none" >> $(SSHD_CONF)
+	@echo "#VersionAddendum none" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# no default banner path" >> $(SSHD_CONF)
+	@echo "#Banner none" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# enable DSCP QoS values (per RFC-4594)" >> $(SSHD_CONF)
+	@echo "IPQoS AF21 AF11" >> $(SSHD_CONF)
+	@echo "# override default of no subsystems" >> $(SSHD_CONF)
+	@echo "Subsystem	sftp	$(USRSBIN)/sftp-server" >> $(SSHD_CONF)
+	@echo "" >> $(SSHD_CONF)
+	@echo "# Example of overriding settings on a per-user basis" >> $(SSHD_CONF)
+	@echo "#Match User anoncvs" >> $(SSHD_CONF)
+	@echo "#	X11Forwarding no" >> $(SSHD_CONF)
+	@echo "#	AllowTcpForwarding no" >> $(SSHD_CONF)
+	@echo "#	PermitTTY no" >> $(SSHD_CONF)
+	@echo "#	ForceCommand cvs server" >> $(SSHD_CONF)
+	@echo "# Some additions..." >> $(SSHD_CONF)
+	@echo "Ciphers chacha20-poly1305@openssh.com,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr" >> $(SSHD_CONF)
+	@echo "HostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256" >> $(SSHD_CONF)
+	@echo "CASignatureAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256" >> $(SSHD_CONF)
+	@echo "KexAlgorithms diffie-hellman-group16-sha512,curve25519-sha256,curve25519-sha256@libssh.org" >> $(SSHD_CONF)
+	@echo "MACs hmac-sha2-256,hmac-sha2-512,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com" >> $(SSHD_CONF)
+
+install: control sshd_conf
+	$(SSTRIP) $(BINS)
+	for D in $(SSHD_CONF_INST_DIR) $(BINDIR) $(APPDIR) $(RCSDIR) $(FWDIR) $(WWWDIR); do install -m 0755 -d $$D; done
+	install -m 0644 $(SSHD_CONF) $(SSHD_CONF_INST_DIR)
+	install -m 0755 $(BINS) $(BINDIR)
+	install -m 0755 $(STARTUP) $(APPDIR)
+	install -m 0664 $(WEB) $(WWWDIR)
+	ln -sf $(USRSBINRCAPP)/$(STARTUP) $(RCSDIR)/S$(PRIOS)sshd
+	ln -sf $(USRSBINRCAPP)/$(STARTUP) $(FWDIR)/F$(PRIOF)sshd
+	ln -sf $(TMPDIR)/ssh.zip $(WWWDIR)/ssh.zip
+
+clean:
+	$(MAKE) -C $(OPEN_SSH) clean
+
+distclean:
+	@rm -f $(SSHD_CONF) h_config
+	$(MAKE) -C $(OPEN_SSH) distclean
+
+ifndef BUILD
+control:
+else
+CONFFILES		:= $(CTRL_DIR)/conffiles
+POSTINST		:= $(CTRL_DIR)/postinst
+PRERM			:= $(CTRL_DIR)/prerm
+
+control: conffiles postinst prerm
+
+conffiles:
+	@echo "$(USRETC)/$(SSHD_CONF)" > $(CONFFILES)
+
+postinst:
+	@echo "#!/bin/sh" > $(POSTINST)
+	@echo "ln -sf $(USRSBINRCAPP)/$(STARTUP) $(TMPETC)/$(INITD)/$(RCSD)/S$(PRIOS)sshd" >> $(POSTINST)
+	@echo "ln -sf $(USRSBINRCAPP)/$(STARTUP) $(TMPETC)/$(INITD)/$(RCFW)/F$(PRIOF)sshd" >> $(POSTINST)
+	@echo "chown root:root / $(CONFDIR) $(NVRAMDIR)" >> $(POSTINST)
+	@echo "chmod 0755 $(CONFDIR) $(NVRAMDIR)" >> $(POSTINST)
+	@echo "[ -z \"\$$SSH_TTY\" ] && $(USRSBINRCAPP)/$(STARTUP) start" >> $(POSTINST)
+	@echo "exit 0" >> $(POSTINST)
+
+prerm:
+	@echo "#!/bin/sh" > $(PRERM)
+	@echo "rm -f $(TMPETC)/$(INITD)/$(RCSD)/S$(PRIOS)sshd $(TMPETC)/$(INITD)/$(RCFW)/F$(PRIOF)sshd" >> $(PRERM)
+	@echo "if [ -z \"\$$SSH_TTY\" ]; then" >> $(PRERM)
+	@echo "killall -9 sshd >/dev/null 2>&1" >> $(PRERM)
+	@echo "else" >> $(PRERM)
+	@echo "echo \"openssh package removed, kill manually sshd typing: 'killall -9 sshd'\"" >> $(PRERM)
+	@echo "fi" >> $(PRERM)
+	@echo "exit 0" >> $(PRERM)
+endif
+
