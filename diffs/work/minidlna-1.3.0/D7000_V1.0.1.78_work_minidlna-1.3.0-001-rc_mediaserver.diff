diff -urN work/minidlna-1.3.0/rc_snmp work/minidlna-1.3.0/rc_mediaserver
--- work/minidlna-1.3.0/rc_mediaserver	1970-01-01 01:00:00.000000000 +0100
+++ work/minidlna-1.3.0/rc_mediaserver	2018-01-05 12:00:11.000000000 +0100
@@ -0,0 +1,181 @@
+#!/bin/sh
+#
+# ancistrus
+#
+# Netgear's D7000 (V1) Nighthawk Router Experience Distributed Project
+#
+# https://github.com/negan07/ancistrus
+#
+# License: GPLv2
+#
+#
+# Rc script for mediaserver (minidlna daemon).
+#
+# Usage: $0 < start restart event startforced restartforced startorig stop dbregen dbclear dbpurge showlog clearlog * > (<debug>)
+#
+# 'startorig' startup service through orig 'rc_apps' cmd.
+# 'event' is for hotplug storage devices mount/umount/reconfig events.
+# '*' is for original 'rc_apps' service parameters usage if needed.
+# <debug> runs daemon in foreground mode with pedantic debug messages.
+#
+
+locking() {
+	LOCKDIR=/var/lock/`basename $0`
+	MAXNUM=10
+	NUM=0
+
+	# Acquire lockdir to avoid race conditions
+	while [ "${NUM}" -lt "${MAXNUM}" ]
+	do
+	mkdir -p -m 0755 "${LOCKDIR}" >/dev/null 2>&1 && trap 'rm -rf "${LOCKDIR}"' INT TERM QUIT HUP EXIT && return 0
+	sleep 1
+	let NUM++
+	done
+
+	echo "$0: locking failed" && exit ${MAXNUM}
+}
+
+stop() {
+	# Kill all clients
+	for PID in `pidof ${DAEMON}`
+	do
+	set -- 10 5 30 5
+	for SIGNAL in 15 9 0 9; do [ -e /proc/${PID}/stat ] && while kill -$SIGNAL $PID >/dev/null 2>&1; do sleep $1; done; shift; done
+	done
+}
+
+start() {
+	# Checking if service is enabled
+	[ "`anc nvram drget media_server_enable 0`" = "1" ] || [ ! -z "$1" ] || return 1
+
+	# Checking for /dev/sdX storage presence
+	[ ! -z "`cat /proc/mounts | grep /dev/sd`" ] || return 2
+
+	# Checking if the service is already running
+	[ ! -z "`pidof ${DAEMON}`" ] && echo "${DAEMON} already running..." && return 3
+
+	# Generating conf file
+	gen_conf
+
+	# Starting daemon
+	$BIN -R -f $CONFFILE
+
+	# Sanity check
+	BIN_RC=$?
+	[ $BIN_RC -ne 0 ] && echo "$0: Error ${BIN_RC} starting ${BIN}..." && return $BIN_RC
+}
+
+gen_conf() {
+	# Common vars
+	for VAR in \
+	friendly_name="`anc nvram drget media_server_name ${DEFSERVNAME}`:D7000" \
+	port="`anc nvram drget media_server_port 8200`" \
+	notify_interval="`anc nvram drget media_server_notify_int 30`" \
+	max_connections="`anc nvram drget media_server_max_connections 50`" \
+	db_dir=${DBDIR} \
+	log_dir=${LOGDIR} \
+	log_level="`anc nvram drget media_server_loglevel info`" \
+	inotify="$([ `anc nvram drget media_server_inotify 1` = 1 ] && echo yes || echo no)" \
+	strict_dlna="$([ `anc nvram drget media_server_strictdlna 0` = 1 ] && echo yes || echo no)" \
+	wide_links="$([ `anc nvram drget media_server_wide_links 0` = 1 ] && echo yes || echo no)" \
+	enable_subtitles="$([ `anc nvram drget media_server_subtitles 1` = 1 ] && echo yes || echo no)" \
+	thumbnails="$([ `anc nvram drget media_server_thumbnails 1` = 1 ] && echo yes || echo no)" \
+	only_filenames="$([ `anc nvram drget media_server_only_filenames 0` = 1 ] && echo yes || echo no)" \
+	live_browsing="$([ `anc nvram drget media_server_live_browsing 0` = 1 ] && echo yes || echo no)" \
+	enable_tivo="$([ `anc nvram drget tivo_enable 0` = 1 ] && echo yes || echo no)" \
+	network_interface="`anc nvram drget lan_if group1`" \
+	album_art_names="Cover.jpg/cover.jpg/AlbumArtSmall.jpg/albumartsmall.jpg/AlbumArt.jpg/albumart.jpg/Album.jpg/album.jpg/Folder.jpg/folder.jpg/Thumb.jpg/thumb.jpg" \
+	model_name="Windows Media Connect compatible (Netgear Netgear)" \
+	model_number="1" \
+	serial="987654321"
+	do echo $VAR; done >$CONFFILE
+	# Media directories
+	for VAR in $([ -n "`anc nvram rget media_server_paths`" ] && anc nvtotxt media_server_paths || echo "${ROOTSHDIR}")
+	do echo media_dir="${VAR}"; done >>$CONFFILE
+}
+
+db_clear() {
+	# Acting only if daemon not running
+	[ -z "`pidof ${DAEMON}`" ] && [ -d "${DBDIR}" ] && rm -rf "${DBDIR}/files.db" "${DBDIR}/art_cache"
+}
+
+db_purge() {
+	# Acting only if daemon not running
+	[ -z "`pidof ${DAEMON}`" ] && [ -d "${DBDIR}" ] && rm -rf "${DBDIR}"
+	[ -z "`pidof ${DAEMON}`" ] && [ -d "${LOGDIR}" ] && rm -f "${LOGDIR}/${DAEMON}.log"
+}
+
+show_log() {
+	[ -f "${LOGDIR}/${DAEMON}.log" ] && cat "${LOGDIR}/${DAEMON}.log" 2>/dev/null
+}
+
+clear_log() {
+	[ -f "${LOGDIR}/${DAEMON}.log" ] && echo -n >"${LOGDIR}/${DAEMON}.log"
+}
+
+# Dirs
+CONFDIR=/etc
+BINDIR=/usr/sbin
+
+# Debug purpose
+#BINDIR=/tmp/etc/ancdbg
+
+# Names
+DAEMON=minidlna
+CONFFILE=${CONFDIR}/${DAEMON}.conf
+BIN=${BINDIR}/${DAEMON}
+DEFSERVNAME=ReadyDLNA
+ROOTSHDIR=/mnt/shares/
+DEFDBDIR="`cat /proc/mounts | grep /dev/sd | head -n 1 | cut -d ' ' -f 2`/.${DEFSERVNAME}"
+DBDIR="`anc nvram drget media_server_dbdir ${DEFDBDIR}`"
+LOGDIR="`anc nvram drget media_server_logdir ${DEFDBDIR}`"
+
+# Debug running
+[ "${2}" = "debug" ] && BIN="${BINDIR}/${DAEMON} -d -v"
+
+locking
+case $1 in
+start|restart|dbregen)
+stop
+start
+;;
+event)
+	case $2 in
+	umount*)
+	stop
+	;;
+	*)
+	stop
+	start
+	;;
+	esac
+;;
+startforced|restartforced)
+stop
+start $1
+;;
+startorig)
+anc redir `basename $0` restart
+;;
+stop)
+stop
+;;
+dbclear)
+db_clear
+;;
+dbpurge)
+db_purge
+;;
+showlog)
+show_log
+;;
+clearlog)
+clear_log
+;;
+"")
+echo "Usage: $0 < start restart event startforced restartforced startorig stop dbregen dbclear dbpurge showlog clearlog * > (<debug>)"
+;;
+*)
+anc redir `basename $0` "$@"
+;;
+esac
