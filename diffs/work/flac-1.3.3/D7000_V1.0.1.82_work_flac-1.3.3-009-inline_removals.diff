diff -urN work/flac-1.3.3/flac-1.3.3/include/share/alloc.h work/flac-1.3.3/flac-1.3.3/include/share/alloc.h
--- work/flac-1.3.3/flac-1.3.3/include/share/alloc.h	2018-10-23 23:00:46.662292000 +0200
+++ work/flac-1.3.3/flac-1.3.3/include/share/alloc.h	2018-10-23 23:01:08.566300143 +0200
@@ -66,7 +66,7 @@
 /* avoid malloc()ing 0 bytes, see:
  * https://www.securecoding.cert.org/confluence/display/seccode/MEM04-A.+Do+not+make+assumptions+about+the+result+of+allocating+0+bytes?focusedCommentId=5407003
 */
-static inline void *safe_malloc_(size_t size)
+static void *safe_malloc_(size_t size)
 {
 	/* malloc(0) is undefined; FLAC src convention is to always allocate */
 	if(!size)
@@ -74,7 +74,7 @@
 	return malloc(size);
 }
 
-static inline void *safe_calloc_(size_t nmemb, size_t size)
+__attribute__((unused)) static void *safe_calloc_(size_t nmemb, size_t size)
 {
 	if(!nmemb || !size)
 		return malloc(1); /* malloc(0) is undefined; FLAC src convention is to always allocate */
@@ -83,7 +83,7 @@
 
 /*@@@@ there's probably a better way to prevent overflows when allocating untrusted sums but this works for now */
 
-static inline void *safe_malloc_add_2op_(size_t size1, size_t size2)
+static void *safe_malloc_add_2op_(size_t size1, size_t size2)
 {
 	size2 += size1;
 	if(size2 < size1)
@@ -91,7 +91,7 @@
 	return safe_malloc_(size2);
 }
 
-static inline void *safe_malloc_add_3op_(size_t size1, size_t size2, size_t size3)
+__attribute__((unused)) static void *safe_malloc_add_3op_(size_t size1, size_t size2, size_t size3)
 {
 	size2 += size1;
 	if(size2 < size1)
@@ -102,7 +102,7 @@
 	return safe_malloc_(size3);
 }
 
-static inline void *safe_malloc_add_4op_(size_t size1, size_t size2, size_t size3, size_t size4)
+__attribute__((unused)) static void *safe_malloc_add_4op_(size_t size1, size_t size2, size_t size3, size_t size4)
 {
 	size2 += size1;
 	if(size2 < size1)
@@ -118,7 +118,7 @@
 
 void *safe_malloc_mul_2op_(size_t size1, size_t size2) ;
 
-static inline void *safe_malloc_mul_3op_(size_t size1, size_t size2, size_t size3)
+__attribute__((unused)) static void *safe_malloc_mul_3op_(size_t size1, size_t size2, size_t size3)
 {
 	if(!size1 || !size2 || !size3)
 		return malloc(1); /* malloc(0) is undefined; FLAC src convention is to always allocate */
@@ -131,7 +131,7 @@
 }
 
 /* size1*size2 + size3 */
-static inline void *safe_malloc_mul2add_(size_t size1, size_t size2, size_t size3)
+__attribute__((unused)) static void *safe_malloc_mul2add_(size_t size1, size_t size2, size_t size3)
 {
 	if(!size1 || !size2)
 		return safe_malloc_(size3);
@@ -141,7 +141,7 @@
 }
 
 /* size1 * (size2 + size3) */
-static inline void *safe_malloc_muladd2_(size_t size1, size_t size2, size_t size3)
+__attribute__((unused)) static void *safe_malloc_muladd2_(size_t size1, size_t size2, size_t size3)
 {
 	if(!size1 || (!size2 && !size3))
 		return malloc(1); /* malloc(0) is undefined; FLAC src convention is to always allocate */
@@ -153,7 +153,7 @@
 	return malloc(size1*size2);
 }
 
-static inline void *safe_realloc_(void *ptr, size_t size)
+static void *safe_realloc_(void *ptr, size_t size)
 {
 	void *oldptr = ptr;
 	void *newptr = realloc(ptr, size);
@@ -161,7 +161,7 @@
 		free(oldptr);
 	return newptr;
 }
-static inline void *safe_realloc_add_2op_(void *ptr, size_t size1, size_t size2)
+__attribute__((unused)) static void *safe_realloc_add_2op_(void *ptr, size_t size1, size_t size2)
 {
 	size2 += size1;
 	if(size2 < size1) {
@@ -171,7 +171,7 @@
 	return realloc(ptr, size2);
 }
 
-static inline void *safe_realloc_add_3op_(void *ptr, size_t size1, size_t size2, size_t size3)
+__attribute__((unused)) static void *safe_realloc_add_3op_(void *ptr, size_t size1, size_t size2, size_t size3)
 {
 	size2 += size1;
 	if(size2 < size1)
@@ -182,7 +182,7 @@
 	return realloc(ptr, size3);
 }
 
-static inline void *safe_realloc_add_4op_(void *ptr, size_t size1, size_t size2, size_t size3, size_t size4)
+__attribute__((unused)) static void *safe_realloc_add_4op_(void *ptr, size_t size1, size_t size2, size_t size3, size_t size4)
 {
 	size2 += size1;
 	if(size2 < size1)
@@ -196,7 +196,7 @@
 	return realloc(ptr, size4);
 }
 
-static inline void *safe_realloc_mul_2op_(void *ptr, size_t size1, size_t size2)
+static void *safe_realloc_mul_2op_(void *ptr, size_t size1, size_t size2)
 {
 	if(!size1 || !size2)
 		return realloc(ptr, 0); /* preserve POSIX realloc(ptr, 0) semantics */
@@ -206,7 +206,7 @@
 }
 
 /* size1 * (size2 + size3) */
-static inline void *safe_realloc_muladd2_(void *ptr, size_t size1, size_t size2, size_t size3)
+__attribute__((unused)) static void *safe_realloc_muladd2_(void *ptr, size_t size1, size_t size2, size_t size3)
 {
 	if(!size1 || (!size2 && !size3))
 		return realloc(ptr, 0); /* preserve POSIX realloc(ptr, 0) semantics */
diff -urN work/flac-1.3.3/flac-1.3.3/src/libFLAC/bitreader.c work/flac-1.3.3/flac-1.3.3/src/libFLAC/bitreader.c
--- work/flac-1.3.3/flac-1.3.3/src/libFLAC/bitreader.c	2018-05-23 23:19:51.851217000 +0200
+++ work/flac-1.3.3/flac-1.3.3/src/libFLAC/bitreader.c	2021-01-07 18:18:12.164258178 +0100
@@ -126,7 +126,7 @@
 	br->crc16_align = 0;
 }
 
-static inline void crc16_update_block_(FLAC__BitReader *br)
+static void crc16_update_block_(FLAC__BitReader *br)
 {
 	if(br->consumed_words > br->crc16_offset && br->crc16_align)
 		crc16_update_word_(br, br->buffer[br->crc16_offset++]);
diff -urN work/flac-1.3.3/flac-1.3.3/src/libFLAC/bitwriter.c work/flac-1.3.3/flac-1.3.3/src/libFLAC/bitwriter.c
--- work/flac-1.3.3/flac-1.3.3/src/libFLAC/bitwriter.c	2019-03-07 21:00:12.258084000 +0100
+++ work/flac-1.3.3/flac-1.3.3/src/libFLAC/bitwriter.c	2021-01-07 18:18:12.164258178 +0100
@@ -281,7 +281,7 @@
 	(void)bw;
 }
 
-inline FLAC__bool FLAC__bitwriter_write_zeroes(FLAC__BitWriter *bw, uint32_t bits)
+FLAC__bool FLAC__bitwriter_write_zeroes(FLAC__BitWriter *bw, uint32_t bits)
 {
 	uint32_t n;
 
@@ -319,7 +319,7 @@
 	return true;
 }
 
-static inline FLAC__bool FLAC__bitwriter_write_raw_uint32_nocheck(FLAC__BitWriter *bw, FLAC__uint32 val, uint32_t bits)
+static FLAC__bool FLAC__bitwriter_write_raw_uint32_nocheck(FLAC__BitWriter *bw, FLAC__uint32 val, uint32_t bits)
 {
 	register uint32_t left;
 
@@ -360,7 +360,7 @@
 	return true;
 }
 
-inline FLAC__bool FLAC__bitwriter_write_raw_uint32(FLAC__BitWriter *bw, FLAC__uint32 val, uint32_t bits)
+FLAC__bool FLAC__bitwriter_write_raw_uint32(FLAC__BitWriter *bw, FLAC__uint32 val, uint32_t bits)
 {
 	/* check that unused bits are unset */
 	if((bits < 32) && (val>>bits != 0))
@@ -369,7 +369,7 @@
 	return FLAC__bitwriter_write_raw_uint32_nocheck(bw, val, bits);
 }
 
-inline FLAC__bool FLAC__bitwriter_write_raw_int32(FLAC__BitWriter *bw, FLAC__int32 val, uint32_t bits)
+FLAC__bool FLAC__bitwriter_write_raw_int32(FLAC__BitWriter *bw, FLAC__int32 val, uint32_t bits)
 {
 	/* zero-out unused bits */
 	if(bits < 32)
@@ -378,7 +378,7 @@
 	return FLAC__bitwriter_write_raw_uint32_nocheck(bw, (FLAC__uint32)val, bits);
 }
 
-inline FLAC__bool FLAC__bitwriter_write_raw_uint64(FLAC__BitWriter *bw, FLAC__uint64 val, uint32_t bits)
+FLAC__bool FLAC__bitwriter_write_raw_uint64(FLAC__BitWriter *bw, FLAC__uint64 val, uint32_t bits)
 {
 	/* this could be a little faster but it's not used for much */
 	if(bits > 32) {
@@ -390,7 +390,7 @@
 		return FLAC__bitwriter_write_raw_uint32(bw, (FLAC__uint32)val, bits);
 }
 
-inline FLAC__bool FLAC__bitwriter_write_raw_uint32_little_endian(FLAC__BitWriter *bw, FLAC__uint32 val)
+FLAC__bool FLAC__bitwriter_write_raw_uint32_little_endian(FLAC__BitWriter *bw, FLAC__uint32 val)
 {
 	/* this doesn't need to be that fast as currently it is only used for vorbis comments */
 
@@ -406,7 +406,7 @@
 	return true;
 }
 
-inline FLAC__bool FLAC__bitwriter_write_byte_block(FLAC__BitWriter *bw, const FLAC__byte vals[], uint32_t nvals)
+FLAC__bool FLAC__bitwriter_write_byte_block(FLAC__BitWriter *bw, const FLAC__byte vals[], uint32_t nvals)
 {
 	uint32_t i;
 
