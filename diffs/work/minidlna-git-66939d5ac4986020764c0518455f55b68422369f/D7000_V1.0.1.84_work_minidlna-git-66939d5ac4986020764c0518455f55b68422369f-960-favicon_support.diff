--- work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/icons.c
+++ work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/icons.c
@@ -2929,3 +2929,54 @@ jpeg_lrg[] = "\xff\xd8\xff\xe0\x00\x10\x4a\x46\x49\x46\x00\x01\x01\x01\x00\x5a\x
              "\x1e\x88\x20\xa8\xd8\xba\xe2\x7e\xdc\x26\x9a\x69\x08\xf7\x22\x22\x02\x82\x28\x82\x29\xe8\x88\x9e"
              "\xda\x69\xa6\x90\x8f\xff\xd9";
 #endif
+/* Derived from large icons above for use with MiniDLNA by Shrimpkin@SourceForge.net.
+ * favicon.ico 16x16 4 bit. */
+#ifdef NETGEAR
+unsigned char
+favicon[] =  "\x00\x00\x01\x00\x01\x00\x10\x10\x10\x00\x01\x00\x04\x00\x28\x01\x00\x00\x16\x00\x00\x00\x28\x00"
+             "\x00\x00\x10\x00\x00\x00\x20\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+             "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8e\x2d\x65\x00\x90\x23\x97\x00\x66\x44"
+             "\x62\x00\x4d\x51\x5e\x00\x64\x27\xeb\x00\x83\x43\x90\x00\x6d\x70\x7f\x00\xeb\xb6\x35\x00\x15\x94"
+             "\xf7\x00\xa3\xa5\xb3\x00\x01\xb8\xfd\x00\x63\xc1\xe0\x00\xf5\xd2\x8d\x00\x17\xdc\xff\x00\xc5\xe1"
+             "\xec\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x51\x11\x11\x11\xff\xff\xff\xfc"
+             "\x66\x11\x11\x00\x4f\xff\xff\xcc\x66\x66\x00\x00\x4f\xff\xff\xcc\x66\xff\xff\x00\x44\xff\xff\xcc"
+             "\x6f\x3f\xff\x2f\x44\x4f\xfc\x77\xf3\x3f\xf3\xff\x94\x4f\x77\x77\xff\x3f\x33\x3f\x99\x94\xf7\x77"
+             "\xff\x33\xf3\xff\x99\x9b\xf7\x77\xff\x33\xf3\x3f\x9b\xaf\xf7\xc7\xff\xff\xf3\xff\xaa\xff\xff\x77"
+             "\xee\xff\xff\x88\xaa\xff\xff\xf7\xee\xee\xf8\x88\xaf\xff\xff\xf7\xee\xdd\xda\x88\xaf\xff\xff\xff"
+             "\xbd\xdd\xdd\xda\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xf0\x0f\x00\x00\xe0\x07"
+             "\x00\x00\xc0\x07\x00\x00\xc3\xc3\x00\x00\xc5\xd1\x00\x00\x89\xb1\x00\x00\x0d\x10\x00\x00\x8c\xb0"
+             "\x00\x00\x8c\x91\x00\x00\x8f\xb3\x00\x00\xc3\xc3\x00\x00\xe0\x87\x00\x00\xe0\x07\x00\x00\xf0\x0f"
+             "\x00\x00\xff\xff\x00\x00";
+#elif FreeBSD
+unsigned char
+favicon[] =  "\x00\x00\x01\x00\x01\x00\x0e\x10\x10\x00\x01\x00\x04\x00\x28\x01\x00\x00\x16\x00\x00\x00\x28\x00"
+             "\x00\x00\x0e\x00\x00\x00\x20\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+             "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x13\x1f\x00\x0a\x0c\x5d\x00\x00\x00"
+             "\xb3\x00\x0f\x13\x98\x00\x00\x15\xd8\x00\x43\x49\x67\x00\x3f\x40\x96\x00\x02\x39\xed\x00\x2a\x6d"
+             "\x99\x00\x41\x7a\xe7\x00\x75\x7f\xed\x00\x8f\x93\xae\x00\x9d\xc2\xf5\x00\xbc\xc8\xef\x00\xef\xf4"
+             "\xfd\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff"
+             "\xf6\x38\x85\xff\xff\x00\xff\xfb\x24\x44\x79\x5f\xff\x00\xff\xb2\x24\x24\x47\x9b\xff\x00\xff\x34"
+             "\x44\x32\x22\x2c\x0f\x00\xfb\x44\x44\x33\x22\x19\xff\x00\x0b\x77\x44\x22\x22\x33\xef\x00\xfd\x99"
+             "\x74\x42\x33\x31\xff\x00\xff\xce\x94\x44\x23\x6b\xbf\x00\xf5\xee\xed\xcd\xda\x26\xff\x00\xf3\x6e"
+             "\xee\xee\xbe\xa2\x6f\x00\xf3\xad\xee\xee\xdd\xea\xff\x00\xff\x5f\xff\xbf\xbf\x0f\x1f\x00\xff\xff"
+             "\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\x00\xff\xfc\x00\x00\xff\xfc\x00\x00\xf8\x3c"
+             "\x00\x00\xe0\x1c\x00\x00\xc0\x0c\x00\x00\xc0\x04\x00\x00\x80\x0c\x00\x00\x00\x04\x00\x00\x80\x0c"
+             "\x00\x00\xc0\x04\x00\x00\x80\x0c\x00\x00\x80\x04\x00\x00\x80\x0c\x00\x00\xdd\x54\x00\x00\xff\xfc"
+             "\x00\x00\xff\xfc\x00\x00";
+#else
+unsigned char
+favicon[] =  "\x00\x00\x01\x00\x01\x00\x0e\x10\x10\x00\x01\x00\x04\x00\x28\x01\x00\x00\x16\x00\x00\x00\x28\x00"
+             "\x00\x00\x0e\x00\x00\x00\x20\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+             "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x02\x00\x26\x27\x25\x00\x52\x52"
+             "\x51\x00\x1f\x58\x6f\x00\x00\x62\x8d\x00\x72\x70\x6b\x00\x00\x76\xa6\x00\x92\x91\x8e\x00\x00\x94"
+             "\xcb\x00\x6f\xab\xbf\x00\x00\xaf\xe4\x00\xaa\xba\xbe\x00\x22\xcf\xfd\x00\xda\xe0\xdf\x00\xfa\xfe"
+             "\xfc\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\xff\x34\x86\x0f\x0f\x86\xff\x00\xfc\xcc"
+             "\xca\x22\x14\xcc\xcf\x00\xfc\xcc\xc9\xee\xe3\xcc\xcc\x00\xfc\xcc\x67\xee\xe9\x86\xff\x00\xff\xac"
+             "\xde\xde\xee\x30\x3f\x00\xff\xf0\xee\xde\xee\x50\x0f\x00\xff\xf0\xde\xee\xee\x20\x0f\x00\xff\xff"
+             "\x2e\xee\xed\x10\xff\x00\xff\xff\x0d\xee\xd7\x0f\xff\x00\xff\xff\xf5\xbd\xe1\xff\xff\x00\xff\xff"
+             "\xf3\xaa\xa1\x0f\xff\x00\xff\xff\xf2\x88\xb0\xff\xff\x00\xff\xff\xf2\x77\xb0\xff\xff\x00\xff\xff"
+             "\xf0\x00\x00\xff\xff\x00\xff\xff\xff\x00\x1f\xff\xff\x00\xff\xfc\x00\x00\xc1\x4c\x00\x00\x80\x04"
+             "\x00\x00\x80\x00\x00\x00\x80\x0c\x00\x00\xc0\x04\x00\x00\xe0\x04\x00\x00\xe0\x04\x00\x00\xf0\x0c"
+             "\x00\x00\xf0\x1c\x00\x00\xf8\x3c\x00\x00\xf8\x1c\x00\x00\xf8\x3c\x00\x00\xf8\x3c\x00\x00\xf8\x3c"
+             "\x00\x00\xfc\x7c\x00\x00";
+#endif
--- work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/upnphttp.c
+++ work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/upnphttp.c
@@ -102,6 +102,7 @@ static void SendResp_caption(struct upnphttp *, char * url);
 static void SendResp_resizedimg(struct upnphttp *, char * url);
 static void SendResp_thumbnail(struct upnphttp *, char * url);
 static void SendResp_dlnafile(struct upnphttp *, char * url);
+static void SendResp_favicon(struct upnphttp * h);
 static void Process_upnphttp(struct event *ev);
 
 struct upnphttp * 
@@ -1068,6 +1069,10 @@ ProcessHttpQuery_upnphttp(struct upnphttp * h)
 			SendResp_presentation(h);
 			#endif
 		}
+		else if(strcmp(HttpUrl, "/favicon.ico") == 0)
+		{
+			SendResp_favicon(h);
+		}
 		else
 		{
 			DPRINTF(E_WARN, L_HTTP, "%s not found, responding ERROR 404\n", HttpUrl);
@@ -1437,6 +1442,37 @@ start_dlna_header(struct string_s *str, int respcode, const char *tmode, const c
 }
 
 static void
+SendResp_favicon(struct upnphttp * h)
+{
+	char header[512], date[30], *data, *mime = "image/x-icon";
+	int size;
+	struct string_s str;
+	time_t now;
+
+	data = (char *)favicon;
+	size = sizeof(favicon)-1;
+
+	INIT_STR(str, header);
+
+	now = time(NULL);
+	strftime(date, sizeof(date),"%a, %d %b %Y %H:%M:%S GMT" , gmtime(&now));
+	strcatf(&str, "HTTP/1.1 200 OK\r\n"
+	             "Connection: close\r\n"
+	             "Date: %s\r\n"
+	             "Server: " MINIDLNA_SERVER_STRING "\r\n"
+	             "Content-Type: %s\r\n"
+	             "Content-Length: %d\r\n\r\n",
+	             date, mime, size);
+
+	if( send_data(h, str.data, str.off, MSG_MORE) == 0 )
+	{
+		if( h->req_command != EHead )
+			send_data(h, data, size, 0);
+	}
+	CloseSocket_upnphttp(h);
+}
+
+static void
 SendResp_icon(struct upnphttp * h, char * icon)
 {
 	char header[512];
