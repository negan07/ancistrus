--- work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna.c
+++ work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna.c
@@ -816,6 +816,10 @@
 			if (strcasecmp(ary_options[i].value, "beacon") == 0)
 				CLEARFLAG(TIVO_BONJOUR_MASK);
 			break;
+		case UPNPLIVEBROWSING:
+			if (strtobool(ary_options[i].value))
+				SETFLAG(LIVE_BROWSING_MASK);
+			break;
 		case ENABLE_SUBTITLES:
 			if (!strtobool(ary_options[i].value))
 				CLEARFLAG(SUBTITLES_MASK);
--- work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna.conf.5
+++ work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna.conf.5
@@ -130,6 +130,12 @@
 Set to 'yes' to enable inotify monitoring of the files under media_dir 
 to automatically discover new files. Set to 'no' to disable inotify.
 
+.IP "\fBlive_browsing\fP"
+Set to 'yes' to enable live browsing of the files under media_dir. This 
+means that every time you list a directory the database is being updated
+Set to 'no' to disable live_browsing. Your database will always contain the
+latest browsed results.
+
 .IP "\fBalbum_art_names\fP"
 This should be a list of file names to check for when searching for album art
 and names should be delimited with a forward slash ("/").
--- work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/monitor.c
+++ work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/monitor.c
@@ -306,7 +306,7 @@
 	}
 	if( sql_get_int_field(db, "SELECT ID from DETAILS where PATH = '%q'", path) > 0 )
 	{
-		fd = 0;
+		if ( fd > 0 ) fd = 0;
 		if (!GETFLAG(RESCAN_MASK))
 			DPRINTF(E_DEBUG, L_INOTIFY, "%s already exists\n", path);
 	}
@@ -327,6 +327,9 @@
 		monitor_add_watch(fd, path);
 #endif
 
+	/* only recursive update if fd >= 0 */
+	if (fd >= 0)
+	{
 	dir_types = valid_media_types(path);
 
 	ds = opendir(path);
@@ -361,6 +361,7 @@
 		free(esc_name);
 	}
 	closedir(ds);
+	}
 
 	return 0;
 }
@@ -403,3 +403,107 @@
 
 	return ret;
 }
+
+int monitor_update_object(const char* objectID)
+{
+	char* path;
+	DIR * ds;
+	struct dirent * e;
+	char *esc_name;
+	char path_buf[PATH_MAX];
+	enum file_types type = TYPE_UNKNOWN;
+	media_types dir_types;
+	struct stat st;
+
+	path = sql_get_text_field(db, "SELECT d.PATH from DETAILS d LEFT JOIN OBJECTS o ON o.DETAIL_ID=d.ID where o.OBJECT_ID = '%s'", objectID);
+
+	DPRINTF(E_DEBUG, L_INOTIFY, ("Updating directory '%s' \n"), path);
+
+	if ( path == 0 ) {
+		DPRINTF(E_DEBUG, L_INOTIFY, ("NULL Directory so returning \n"));
+		return -1;
+	}
+	if (access(path, R_OK | X_OK) != 0)
+	{
+		DPRINTF(E_WARN, L_INOTIFY, "Could not access %s [%s]\n", path, strerror(errno));
+		return -1;
+	}
+
+	dir_types = valid_media_types(path);
+
+	ds = opendir(path);
+	if (!ds)
+	{
+		DPRINTF(E_ERROR, L_INOTIFY, "opendir failed! [%s]\n", strerror(errno));
+		return -1;
+	}
+
+	while ((e = readdir(ds)))
+	{
+		if (e->d_name[0] == '.')
+			continue;
+		esc_name = escape_tag(e->d_name, 1);
+		snprintf(path_buf, sizeof(path_buf), "%s/%s", path, e->d_name);
+		switch (e->d_type)
+		{
+		case DT_DIR:
+		case DT_REG:
+		case DT_LNK:
+		case DT_UNKNOWN:
+			type = resolve_unknown_type(path_buf, dir_types);
+		default:
+			break;
+		}
+		/* No multi level update if fd == -1 */
+		if (type == TYPE_DIR)
+		{
+			DPRINTF(E_DEBUG, L_INOTIFY, ("Updating subdirectory '%s' \n"), e->d_name);
+			monitor_insert_directory(-1, esc_name, path_buf);
+		}
+		else if (type == TYPE_FILE)
+		{
+			if ((stat(path_buf, &st) == 0) && (st.st_blocks << 9 >= st.st_size))
+			{
+				DPRINTF(E_DEBUG, L_INOTIFY, ("Updating file '%s' \n"), e->d_name);
+				monitor_insert_file(esc_name, path_buf);
+			}
+		}
+		free(esc_name);
+	}
+	closedir(ds);
+
+	sqlite3_free(path);
+	return 0;
+}
+
+int monitor_remove_obsolete_objects(struct string_s * ids)
+{
+	const char* id;
+	char *path, *clss;
+	id = str_first(ids);
+	while (id[0] != '\0') 
+	{
+		clss = sql_get_text_field(db, "SELECT CLASS FROM OBJECTS WHERE OBJECT_ID = '%s'", id);
+		path = sql_get_text_field(db, "SELECT d.PATH from DETAILS d LEFT JOIN OBJECTS o ON o.DETAIL_ID=d.ID where o.OBJECT_ID = '%s'", id);
+		if (path != 0) {
+			if (strncmp(clss, "container", 9) == 0)
+			{
+				if (strcmp(clss, "container.storageFolder") == 0)
+				{
+					DPRINTF(E_DEBUG, L_HTTP, ("Removing directory '%s' \n"), path);
+					monitor_remove_directory(0, path); 
+				}
+			}
+			else
+			{
+				DPRINTF(E_DEBUG, L_HTTP, ("Removing file '%s' \n"), path);
+				monitor_remove_file(path); 
+			}
+		}
+		sqlite3_free(clss);
+		sqlite3_free(path);
+
+		id = str_next(ids);
+	}
+	return 0;
+}
--- work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/monitor.h
+++ work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/monitor.h
@@ -1,7 +1,12 @@
+#ifndef __MONITOR_H__
+#define __MONITOR_H__
+
 int monitor_insert_file(const char *name, const char *path);
 int monitor_insert_directory(int fd, char *name, const char * path);
 int monitor_remove_file(const char * path);
 int monitor_remove_directory(int fd, const char * path);
+int monitor_update_object(const char * objectID);
+int monitor_remove_obsolete_objects(struct string_s * ids);
 
 #if defined(HAVE_INOTIFY) || defined(HAVE_KQUEUE)
 #define	HAVE_WATCH 1
@@ -10,3 +15,5 @@
 void 	monitor_start();
 void 	monitor_stop();
 #endif
+
+#endif
--- work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/options.c
+++ work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/options.c
@@ -70,6 +70,7 @@
 	{ WIDE_LINKS, "wide_links" },
 	{ TIVO_DISCOVERY, "tivo_discovery" },
 	{ ENABLE_SUBTITLES, "enable_subtitles" },
+	{ UPNPLIVEBROWSING, "live_browsing" },
 };
 
 int
--- work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/options.h
+++ work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/options.h
@@ -63,6 +63,7 @@
 	WIDE_LINKS,			/* allow following symlinks outside the defined media_dirs */
 	TIVO_DISCOVERY,			/* TiVo discovery protocol: bonjour or beacon. Defaults to bonjour if supported */
 	ENABLE_SUBTITLES,		/* Enable generic subtitle support for all clients by default */
+	UPNPLIVEBROWSING,		/* Perform live browsing */
 };
 
 /* readoptionsfile()
--- work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/upnpglobalvars.h
+++ work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/upnpglobalvars.h
@@ -210,6 +210,7 @@
 #define FORCE_ALPHASORT_MASK  0x0800
 #define NO_EXTRACT_NAMES_MASK 0x1000
 #define THUMBS_ART_MASK       0x2000
+#define LIVE_BROWSING_MASK    0x3000

 #define SETFLAG(mask)	runtime_flags |= mask
 #define GETFLAG(mask)	(runtime_flags & mask)
--- work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/upnpsoap.c
+++ work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/upnpsoap.c
@@ -72,6 +72,7 @@
 #include "scanner.h"
 #include "sql.h"
 #include "log.h"
+#include "monitor.h"
 
 #ifdef __sparc__ /* Sorting takes too long on slow processors with very large containers */
 # define __SORT_LIMIT if( totalMatches < 10000 )
@@ -836,7 +837,7 @@
 #define COLUMNS "o.DETAIL_ID, o.CLASS," \
                 " d.SIZE, d.TITLE, d.DURATION, d.BITRATE, d.SAMPLERATE, d.ARTIST," \
                 " d.ALBUM, d.GENRE, d.COMMENT, d.CHANNELS, d.TRACK, d.DATE, d.RESOLUTION," \
-                " d.THUMBNAIL, d.CREATOR, d.DLNA_PN, d.MIME, d.ALBUM_ART, d.ROTATION, d.DISC "
+                " d.THUMBNAIL, d.CREATOR, d.DLNA_PN, d.MIME, d.ALBUM_ART, d.ROTATION, d.DISC, d.PATH "
 #define SELECT_COLUMNS "SELECT o.OBJECT_ID, o.PARENT_ID, o.REF_ID, " COLUMNS
 
 static int
@@ -846,11 +847,24 @@
 	char *id = argv[0], *parent = argv[1], *refID = argv[2], *detailID = argv[3], *class = argv[4], *size = argv[5], *title = argv[6],
 	     *duration = argv[7], *bitrate = argv[8], *sampleFrequency = argv[9], *artist = argv[10], *album = argv[11],
 	     *genre = argv[12], *comment = argv[13], *nrAudioChannels = argv[14], *track = argv[15], *date = argv[16], *resolution = argv[17],
-	     *tn = argv[18], *creator = argv[19], *dlna_pn = argv[20], *mime = argv[21], *album_art = argv[22], *rotate = argv[23], *disc = argv[24];
+	     *tn = argv[18], *creator = argv[19], *dlna_pn = argv[20], *mime = argv[21], *album_art = argv[22], *rotate = argv[23], *disc = argv[24], *path = argv[25];
 	char dlna_buf[128];
 	const char *ext;
 	struct string_s *str = passed_args->str;
+	struct string_s *tags = passed_args->tags;
 	int ret = 0;
+
+	if (GETFLAG(LIVE_BROWSING_MASK))
+	{
+		/* stat the thing, if it's not there, tag and skip, it might be a magic path, in which case we should not tag it */
+		if (path != 0 && access(path, R_OK) != 0)
+		{
+			DPRINTF(E_DEBUG, L_HTTP, ("Entry '%s' no longer exists\n"), path);
+			strcatd0(tags, id);
+			return 0;
+		}
+		DPRINTF(E_DEBUG, L_HTTP, ("Adding '%s' = '%s'\n"), title, path);
+	}
 
 	/* Make sure we have at least 8KB left of allocated memory to finish the response. */
 	if( str->off > (str->size - 8192) )
@@ -1341,6 +1355,7 @@
 	char *sql, *ptr;
 	struct Response args;
 	struct string_s str;
+	struct string_s tags;
 	int totalMatches = 0;
 	int ret;
 	const char *ObjectID, *BrowseFlag;
@@ -1356,6 +1371,7 @@
 
 	memset(&args, 0, sizeof(args));
 	memset(&str, 0, sizeof(str));
+	memset(&tags, 0, sizeof(tags));
 
 	ParseNameValue(h->req_buf + h->req_contentoff, h->req_contentlen, &data, 0);
 
@@ -1405,11 +1421,22 @@
 		ret = strcatf(&str, SEC_NAMESPACE);
 	strcatf(&str, "&gt;\n");
 
+	tags.data = malloc(DEFAULT_RESP_SIZE);
+	tags.size = DEFAULT_RESP_SIZE;
+	tags.off = 0;
+	tags.data[0] = '\0';
+
 	args.returned = 0;
 	args.requested = RequestedCount;
 	args.client = h->req_client ? h->req_client->type->type : 0;
 	args.flags = h->req_client ? h->req_client->type->flags : 0;
 	args.str = &str;
+	args.tags = &tags;
+
+	if (GETFLAG(LIVE_BROWSING_MASK))
+	{
+		monitor_update_object(ObjectID);
+	}    
 	DPRINTF(E_DEBUG, L_HTTP, "Browsing ContentDirectory:\n"
 	                         " * ObjectID: %s\n"
 	                         " * Count: %d\n"
@@ -1435,7 +1462,7 @@
 				refid_sql = magic->refid_sql;
 		}
 		sql = sqlite3_mprintf("SELECT %s, %s, %s, " COLUMNS
-				      "from OBJECTS o left join DETAILS d on (d.ID = o.DETAIL_ID)"
+				      " from OBJECTS o left join DETAILS d on (d.ID = o.DETAIL_ID)"
 				      " where OBJECT_ID = '%q';",
 				      objectid_sql, parentid_sql, refid_sql, id);
 		ret = sqlite3_exec(db, sql, callback, (void *) &args, &zErrMsg);
@@ -1551,8 +1578,14 @@
 	                    args.returned, totalMatches, updateID);
 	BuildSendAndCloseSoapResp(h, str.data, str.off);
 browse_error:
+	if (GETFLAG(LIVE_BROWSING_MASK))
+	{
+		monitor_remove_obsolete_objects(&tags);
+	}
+
 	ClearNameValueList(&data);
 	free(orderBy);
+	free(tags.data);
 	free(str.data);
 }
 
--- work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/upnpsoap.h
+++ work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/upnpsoap.h
@@ -45,6 +45,7 @@
 	uint32_t filter;
 	uint32_t flags;
 	enum client_types client;
+	struct string_s *tags;
 };
 
 /* ExecuteSoapAction():
--- work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/utils.h
+++ work/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/minidlna-git-66939d5ac4986020764c0518455f55b68422369f/utils.h
@@ -56,6 +56,46 @@
 	strncpy(dst, src, --len);
 	dst[len] = '\0';
 }
+static inline int strcatd0(struct string_s *dst, const char *src)
+{
+	size_t i = dst->off;
+	size_t n = dst->size-2;
+	char*  s = dst->data;
+	size_t j = 0;
+	while (i < n && src[j] != '\0')
+	{
+		*(s + i) = *(src + j);
+		j++;
+		i++;
+	}
+	if (i >= n) 
+	{
+		j = 0;
+	}
+	else 
+	{
+		s[i++] = '\0';
+		s[i] = '\0';
+		dst->off = i;
+	}
+	return j;
+}
+static inline const char* str_first(struct string_s *src) {
+	src->off = 0;
+	return src->data;
+}
+static inline const char* str_next(struct string_s *dst) {
+	/* find the next offset */
+	size_t j = 0;
+	char* s = dst->data + dst->off;
+	while (*(s + j) != '\0') 
+	{
+		j++;
+	}
+	/* we are now at the end of the previous string, so go to the next*/
+	dst->off += (j+1);
+	return dst->data + dst->off;
+}
 static inline int is_reg(const struct dirent *d)
 {
 #if HAVE_STRUCT_DIRENT_D_TYPE
