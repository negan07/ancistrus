--- work/ppp-2.4.9/Makefile
+++ work/ppp-2.4.9/Makefile
@@ -0,0 +1,64 @@
+include ../Rules.mak
+
+SUBDIRS := pppd/plugins pppd
+
+LIBSNAME		:= libpppoatm.so libpppoe.so
+BINNAME			:= pppd
+LIBS			:= pppd/plugins/pppoatm/libpppoatm.so pppd/plugins/pppoe/libpppoe.so
+BINS			:= pppd/$(BINNAME)
+STARTUP			:= rc_wan
+
+all:
+	@for D in $(SUBDIRS); do $(MAKE) -C $$D || exit $$?; done
+
+install: control
+	$(STRIP) $(LIBS)
+	$(SSTRIP) $(BINS)
+	install -m 0755 -d $(TMPINSTDIR)
+ifeq ($(ADSL),1)
+	install -m 0755 $(LIBS) $(TMPINSTDIR)
+endif
+	install -m 0755 $(BINS) $(TMPINSTDIR)
+
+clean:
+	@for D in $(SUBDIRS); do $(MAKE) -C $$D clean || exit $$?; done
+
+dist-clean:	clean
+
+distclean:	dist-clean
+
+ifndef BUILD
+control:
+else
+PREINST			:= $(CTRL_DIR)/preinst
+POSTINST		:= $(CTRL_DIR)/postinst
+
+control: preinst postinst
+
+preinst:
+	@echo "#!/bin/sh" > $(PREINST)
+	@echo "echo \"Kill active services...\"" >> $(PREINST)
+	@echo "for B in $(BINNAME) start_ppp; do killall -9 \$$B >/dev/null 2>&1; sleep 3; done" >> $(PREINST)
+ifeq ($(ADSL),1)
+	@echo "echo \"Removing old libs...\"" >> $(PREINST)
+	@echo "for L in $(LIBSNAME); do [ -f $(LDLIB)/\$$L ] && rm -f $(LDLIB)/\$$L && sync; done" >> $(PREINST)
+endif
+	@echo "echo \"Removing old $(BINNAME)...\"" >> $(PREINST)
+	@echo "[ -f $(USRSBIN)/$(BINNAME) ] && rm -f $(USRSBIN)/$(BINNAME) && sync" >> $(PREINST)
+	@echo "exit 0" >> $(PREINST)
+
+postinst:
+	@echo "#!/bin/sh" > $(POSTINST)
+ifeq ($(ADSL),1)
+	@echo "echo \"Updating $(LIBSNAME) ...\"" >> $(POSTINST)
+	@echo "for L in $(LIBSNAME); do mv -f $(TMPDIR)/\$$L $(LDLIB)/; sync; done" >> $(POSTINST)
+endif
+	@echo "echo \"Updating $(BINNAME) ...\"" >> $(POSTINST)
+	@echo "mv -f $(TMPDIR)/$(BINNAME) $(USRSBIN)/" >> $(POSTINST)
+	@echo "sync" >> $(POSTINST)
+	@echo "echo" >> $(POSTINST)
+	@echo "echo \"Rejoin wan connection or reboot...\"" >> $(POSTINST)
+	@echo "echo" >> $(POSTINST)
+	@echo "exit 0" >> $(POSTINST)
+endif
+
--- work/ppp-2.4.9/pppd/Makefile
+++ work/ppp-2.4.9/pppd/Makefile
@@ -0,0 +1,247 @@
+#
+# pppd makefile for Linux
+# Processed by configure to produce pppd/Makefile
+#
+
+include ../../Rules.mak
+
+TARGETS = pppd
+
+PPPDSRCS = main.c magic.c fsm.c lcp.c ipcp.c upap.c chap-new.c md5.c ccp.c \
+	   ecp.c ipxcp.c auth.c options.c sys-linux.c md4.c chap_ms.c \
+	   demand.c utils.c tty.c eap.c chap-md5.c session.c
+
+HEADERS = ccp.h session.h chap-new.h ecp.h fsm.h ipcp.h \
+	ipxcp.h lcp.h magic.h md5.h patchlevel.h pathnames.h pppd.h \
+	upap.h eap.h
+
+MANPAGES = pppd.8
+PPPDOBJS = main.o magic.o fsm.o lcp.o ipcp.o upap.o chap-new.o md5.o ccp.o \
+	   ecp.o auth.o options.o demand.o utils.o sys-linux.o ipxcp.o tty.o \
+	   eap.o chap-md5.o session.o
+
+#
+# include dependencies if present
+ifeq (.depend,$(wildcard .depend))
+include .depend
+endif
+
+LIBS = -lrt
+
+# Uncomment the next line to include support for Microsoft's
+# MS-CHAP authentication protocol.  Also, edit plugins/radius/Makefile.linux.
+CHAPMS=y
+USE_CRYPT=y
+
+# Don't use MSLANMAN unless you really know what you're doing.
+#MSLANMAN=y
+# Uncomment the next line to include support for MPPE.  CHAPMS (above) must
+# also be enabled.  Also, edit plugins/radius/Makefile.linux.
+#MPPE=y
+
+# Uncomment the next line to include support for PPP packet filtering.
+# This requires that the libpcap library and headers be installed
+# and that the kernel driver support PPP packet filtering.
+#FILTER=y
+
+# Uncomment the next line to enable multilink PPP (enabled by default)
+# Linux distributions: Please leave multilink ENABLED in your builds
+# of pppd!
+#HAVE_MULTILINK=y
+
+# Uncomment the next line to enable the TDB database (enabled by default.)
+# If you enable multilink, then TDB is automatically enabled also.
+# Linux distributions: Please leave TDB ENABLED in your builds.
+#USE_TDB=y
+
+# Uncomment the next line to enable Type=notify services in systemd
+# If enabled, and the user sets the up_sdnotify option, then
+# pppd will not detach and will notify systemd when up.
+#SYSTEMD=y
+#HAS_SHADOW=y
+#USE_PAM=y
+
+ifeq ($(IPV6),1)
+HAVE_INET6=y
+endif
+
+# Enable plugins
+PLUGIN=y
+
+# Enable Microsoft proprietary Callback Control Protocol
+CBCP=y
+
+# Enable EAP SRP-SHA1 authentication (requires libsrp)
+#USE_SRP=y
+
+# Use libutil; test if logwtmp is declared in <utmp.h> to detect
+ifeq ($(shell echo '\#include <utmp.h>' | $(CC) -E - 2>/dev/null | grep -q logwtmp && echo yes),yes)
+USE_LIBUTIL=y
+endif
+
+# Enable EAP-TLS authentication (requires MPPE support, libssl and libcrypto)
+#USE_EAPTLS=y
+
+#MAXOCTETS=y
+
+INCLUDE_DIRS = -I../include -I$(SOURCE_PATH)/$(SRC_SHARED_REL_DIR)
+
+COMPILE_FLAGS = -DHAVE_PATHS_H -DIPX_CHANGE -DHAVE_MMAP '-DDESTDIR="/usr/sbin/"' #-D_DISABLE_SERIAL_
+
+CFLAGS	+= -Os -Wall $(COMPILE_FLAGS) $(INCLUDE_DIRS) -DMULTI_OFFER -Wno-strict-aliasing
+
+ifeq ($(TRAFFIC_METER),1)
+CFLAGS	+= -DTRAFFIC_METER
+endif
+
+ifdef CHAPMS
+CFLAGS	+= -DCHAPMS=1
+NEEDDES=y
+PPPDOBJS += md4.o chap_ms.o
+HEADERS	+= md4.h chap_ms.h
+ifdef MSLANMAN
+CFLAGS	+= -DMSLANMAN=1
+endif
+ifdef MPPE
+CFLAGS	+= -DMPPE=1
+HEADERS	+= mppe.h
+endif
+endif
+
+# EAP SRP-SHA1
+ifdef USE_SRP
+CFLAGS	+= -DUSE_SRP -DOPENSSL -I/usr/local/ssl/include
+LIBS	+= -lsrp -L/usr/local/ssl/lib
+NEEDCRYPTOLIB = y
+TARGETS	+= srp-entry
+MANPAGES += srp-entry.8
+EXTRACLEAN += srp-entry.o
+NEEDDES=y
+else
+# OpenSSL has an integrated version of SHA-1, and its implementation
+# is incompatible with this local SHA-1 implementation.  We must use
+# one or the other, not both.
+PPPDSRCS += sha1.c
+HEADERS	+= sha1.h
+PPPDOBJS += sha1.o
+endif
+
+# EAP-TLS
+ifdef USE_EAPTLS
+CFLAGS	+= -DUSE_EAPTLS=1
+LIBS	+= -lssl
+NEEDCRYPTOLIB = y
+PPPDSRC += eap-tls.c
+HEADERS += eap-tls.h
+PPPDOBJS += eap-tls.o
+endif
+
+ifdef HAS_SHADOW
+CFLAGS	+= -DHAS_SHADOW
+#LIBS     += -lshadow $(LIBS)
+endif
+
+ifeq ($(shell echo '\#include <crypt.h>' | $(CC) -E - >/dev/null 2>&1 && echo yes),yes)
+CFLAGS  += -DHAVE_CRYPT_H=1
+LIBS	+= -lcrypt
+endif
+
+ifdef USE_LIBUTIL
+CFLAGS	+= -DHAVE_LOGWTMP=1
+LIBS	+= -lutil
+endif
+
+ifdef NEEDDES
+ifndef USE_CRYPT
+CFLAGS	+= -I$(shell $(CC) --print-sysroot)/usr/include/openssl
+NEEDCRYPTOLIB = y
+else
+CFLAGS	+= -DUSE_CRYPT=1
+endif
+PPPDOBJS+= pppcrypt.o
+HEADERS += pppcrypt.h
+endif
+
+ifdef NEEDCRYPTOLIB
+LIBS	+= -lcrypto
+endif
+
+# For "Pluggable Authentication Modules", see ftp.redhat.com:/pub/pam/.
+ifdef USE_PAM
+CFLAGS	+= -DUSE_PAM
+LIBS	+= -lpam -ldl
+endif
+
+# Multi-link
+ifdef HAVE_MULTILINK
+	# Multilink implies the use of TDB
+	USE_TDB=y
+
+	CFLAGS += -DHAVE_MULTILINK
+	PPPDSRCS += multilink.c
+	PPPDOBJS += multilink.o
+endif
+
+# TDB
+ifdef USE_TDB
+	CFLAGS += -DUSE_TDB=1
+	PPPDSRCS += tdb.c spinlock.c
+	PPPDOBJS += tdb.o spinlock.o
+	HEADERS += tdb.h spinlock.h
+endif
+
+# Lock library binary for Linux is included in 'linux' subdirectory.
+ifdef LOCKLIB
+LIBS	+= -llock
+CFLAGS	+= -DLOCKLIB=1
+endif
+
+ifdef SYSTEMD
+LIBS	+= -lsystemd
+CFLAGS	+= -DSYSTEMD=1
+endif
+
+ifdef PLUGIN
+CFLAGS	+= -DPLUGIN
+endif
+
+ifdef FILTER
+LIBS    += -lpcap
+CFLAGS  += -DPPP_FILTER
+endif
+
+ifdef HAVE_INET6
+     PPPDSRCS += ipv6cp.c eui64.c
+     HEADERS  += ipv6cp.h eui64.h
+     PPPDOBJS += ipv6cp.o eui64.o
+     CFLAGS   += -DINET6=1
+endif
+
+ifdef CBCP
+     PPPDSRCS += cbcp.c
+     PPPDOBJS += cbcp.o
+     CFLAGS += -DCBCP_SUPPORT
+     HEADERS += cbcp.h
+endif
+
+ifdef MAXOCTETS
+     CFLAGS += -DMAXOCTETS
+endif
+
+LIBS += -L../../$(NVRAM) -lscnvram -L$(SOURCE_PATH)/$(SRC_APPS_ROOT_REL_DIR)/sc_libs/liblink -llink -L../../$(ATM)/$(ATM)/src/lib/.libs -latm
+
+all: $(TARGETS)
+
+install:
+
+pppd: $(PPPDOBJS)
+	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(PPPDOBJS) $(LIBS) -Lplugins/pppoatm -lpppoatm -Lplugins/pppoe -lpppoe
+
+srp-entry:	srp-entry.c
+	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ srp-entry.c $(LIBS)
+
+clean:
+	rm -f $(PPPDOBJS) $(EXTRACLEAN) $(TARGETS) *~
+
+depend:
+	$(CPP) -M $(CFLAGS) $(PPPDSRCS) >.depend
--- work/ppp-2.4.9/pppd/plugins/Makefile
+++ work/ppp-2.4.9/pppd/plugins/Makefile
@@ -0,0 +1,43 @@
+include ../../../Rules.mak
+
+CFLAGS	+= -Os -I.. -I../../include -fPIC -Wall -Werror -DCONFIG_MIPS_BRCM
+LDFLAGS	+= -L../../../$(ATM)/$(ATM)/src/lib/.libs -latm
+
+# EAP-TLS
+CFLAGS	+= -DUSE_EAPTLS=1
+
+SUBDIRS := pppoatm pppoe #pppol2tp
+# Uncomment the next line to include the radius authentication plugin
+#SUBDIRS += radius
+
+PLUGINS := #minconn.so passprompt.so passwordfd.so winbind.so
+
+# This setting should match the one in ../Makefile.linux
+#MPPE=y
+
+ifdef MPPE
+CFLAGS   += -DMPPE=1
+endif
+
+# include dependencies if present
+ifeq (.depend,$(wildcard .depend))
+include .depend
+endif
+
+all:	#$(PLUGINS)
+	@for d in $(SUBDIRS); do $(MAKE) -C $$d all || exit $$?; done
+
+%.so: %.c
+	$(CC) -o $@ $(LDFLAGS) $(CFLAGS) $^
+
+VERSION = $(shell awk -F '"' '/VERSION/ { print $$2; }' ../patchlevel.h)
+
+install:
+
+clean:
+	rm -f *.o *.so *.a
+	@for d in $(SUBDIRS); do $(MAKE) -C $$d clean || exit $$?; done
+
+depend:
+	$(CPP) -M $(CFLAGS) *.c >.depend
+	@for d in $(SUBDIRS); do $(MAKE) -C $$d depend || exit $$?; done
--- work/ppp-2.4.9/pppd/plugins/pppoatm/Makefile
+++ work/ppp-2.4.9/pppd/plugins/pppoatm/Makefile
@@ -0,0 +1,41 @@
+#***********************************************************************
+
+include ../../../../Rules.mak
+
+VERSION = $(shell awk -F '"' '/VERSION/ { print $$2; }' ../../patchlevel.h)
+
+CFLAGS += -Os -fPIC -Wall -Werror -DCONFIG_MIPS_BRCM
+CPPFLAGS = -I.. -I../.. -I../../../include -I../../../../$(ATM)/$(ATM)/src/include
+LDFLAGS	+= -L../../../../$(ATM)/$(ATM)/src/lib/.libs -latm
+LIBS += -shared
+
+PLUGIN := libpppoatm.so
+PLUGIN_OBJS := pppoatm.o 
+
+#*******
+# Do we have the ATM libraries installed? Set HAVE_LIBATM to use them,
+# or leave it unset to build the few routines we actually _use_ into
+# the plugin directly.
+#
+HAVE_LIBATM=yes
+
+ifndef HAVE_LIBATM
+CPPFLAGS += -I.
+PLUGIN_OBJS += text2qos.o text2atm.o misc.o ans.o
+LIBS += -lresolv
+endif
+
+#*********
+all: $(PLUGIN)
+
+$(PLUGIN): $(PLUGIN_OBJS)
+	$(CC) $^ $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(LIBS) -Wl,-soname,$@ -o $@
+
+%.o: %.c
+	$(CC) -c $< $(CFLAGS) $(CPPFLAGS) -o $@
+
+install: 
+
+clean:
+	rm -f *.o *.so
+
--- work/ppp-2.4.9/pppd/plugins/pppoe/Makefile
+++ work/ppp-2.4.9/pppd/plugins/pppoe/Makefile
@@ -0,0 +1,50 @@
+include ../../../../Rules.mak
+
+CFLAGS += -Os -Wall -D_linux_=1 -fPIC -DMULTI_OFFER -fcommon -Werror -Wno-unused-but-set-variable -Wno-strict-aliasing #-D_DISABLE_SERIAL_
+CPPFLAGS = -I.. -I../.. -I../../../include
+#
+# Enable RECORD_SID to record the session id into flash, 
+# and send PADT to terminate these sessions before sending PADI
+# 
+# ONLY support Single PPPoE session. Should do more thing when Multi PPPoE. 
+#
+RECORD_SID=1
+ifeq ($(RECORD_SID),1)
+CPPFLAGS += -I../../../../$(NVRAM) -I$(SOURCE_PATH)/$(SRC_ROOT_REL_DIR)/shared -I$(SOURCE_PATH)/$(SRC_APPS_ROOT_REL_DIR)/sc_libs/include
+LDFLAGS += -L../../../../$(NVRAM) -lscnvram -L$(SOURCE_PATH)/$(SRC_APPS_ROOT_REL_DIR)/sc_libs/liblink -llink
+endif
+
+PLUGINSRCS= pppoe.c libpppoe.c utils.c pppoehash.c pppoe_client.c pppoe_relay.c pppoe_server.c pppd_utils.c
+
+all: libpppoe.so
+
+#
+# include dependancies if present and backup if as a header file
+ifeq (.depend,$(wildcard .depend))
+include .depend
+endif
+
+pppoefwd: pppoefwd.o libpppoe.a 
+	$(CC) $^ $(CFLAGS) $(CPPFLAGS) -o $@
+
+pppoed: pppoed.o pppd_utils.o libpppoe.a 
+	$(CC) $^ $(CFLAGS) $(CPPFLAGS) -o $@
+
+libpppoe.a: pppoehash.o pppoe_client.o pppoe_relay.o pppoe_server.o utils.o libpppoe.o 
+	$(AR) -rc $@ $^
+	$(STRIP) $(STRIPFLAGS) $@
+
+libpppoe.so: pppoe.o libpppoe.a
+	$(CC) $^ $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) -shared -Wl,-soname,$@ -o $@
+
+%.o: %.c
+	$(CC) -c $< $(CFLAGS) $(CPPFLAGS) -o $@
+
+install:
+
+clean: 
+	rm -f *.o *.so *.a pppoefwd pppoed
+
+depend:
+	$(CPP) $(CFLAGS) $(CPPFLAGS) $(PLUGINSRCS) >.depend
+
