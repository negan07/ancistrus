--- work/mini_httpd-1.30/mini_httpd.c
+++ work/mini_httpd-1.30/mini_httpd.c
@@ -542,7 +542,7 @@ static void value_required( char* name,
 static void no_value_required( char* name, char* value );
 static int initialize_listen_socket( usockaddr* usaP );
 static void handle_request( void ) __attribute__((noreturn));
-static void finish_request( int exitstatus ) __attribute__((noreturn));
+static void finish_request( int exitstatus, int input ) __attribute__((noreturn));
 static void de_dotdot( char* f );
 static int get_pathinfo( void );
 static void do_file( void );
@@ -1746,7 +1746,7 @@ handle_request( void )
 	if ( SSL_accept( ssl ) == 0 )
 	    {
 	    ERR_print_errors_fp( stderr );
-	    finish_request( 1 );
+	    finish_request( 1, 0 );
 	    }
 	}
 #endif /* USE_SSL */
@@ -2355,29 +2355,30 @@ handle_request( void )
     }
 #endif
 
-    finish_request( 0 );
+    finish_request( 0, 0 );
     }
 
 
 static void
-finish_request( int exitstatus )
+finish_request( int exitstatus, int input )
     {
-#undef LINGER_SOCKOPT
-#define LINGER_READ
+#define LINGER_SOCKOPT
 
+#ifndef LINGER_SOCKOPT
+#define LINGER_READ
+#endif
 #define LINGER_SECS 5
 
 #ifdef LINGER_SOCKOPT
     /* The sockopt version of lingering close. Doesn't actually work. */
     struct linger lin;
 
-    shutdown( conn_fd, SHUT_WR );
+    if (!input) shutdown( conn_fd, SHUT_WR );
     lin.l_onoff = 1;
     lin.l_linger = LINGER_SECS;
     (void) setsockopt(
 	conn_fd, SOL_SOCKET, SO_LINGER, (void*) &lin, sizeof(lin) );
-#endif /* LINGER_SOCKOPT */
-
+#else /* LINGER_SOCKOPT */
 #ifdef LINGER_READ
     /* The "non-blocking read until error/eof/timeout" version of
     ** lingering close.
@@ -2394,7 +2395,7 @@ finish_request( int exitstatus )
 	flags |= (int) O_NDELAY;
 	(void) fcntl( conn_fd, F_SETFL, flags );
 	}
-    shutdown( conn_fd, SHUT_WR );
+    if (!input) shutdown( conn_fd, SHUT_WR );
     for (;;)
 	{
 	FD_ZERO( &rfds );
@@ -2409,6 +2410,7 @@ finish_request( int exitstatus )
 	    break;
 	}
 #endif /* LINGER_READ */
+#endif
 
     exit( exitstatus );
     }
@@ -2932,7 +2934,7 @@ do_cgi( void )
 	    /* Interposer process. */
 	    (void) close( p[0] );
 	    cgi_interpose_input( p[1] );
-	    finish_request( 0 );
+	    finish_request( 0, 1 );
 	    }
 	(void) close( p[1] );
 	if ( p[0] != STDIN_FILENO )
@@ -2974,7 +2975,7 @@ do_cgi( void )
 	    /* Interposer process. */
 	    (void) close( p[1] );
 	    cgi_interpose_output( p[0], parse_headers );
-	    finish_request( 0 );
+	    finish_request( 0, 0 );
 	    }
 	(void) close( p[0] );
 	if ( p[1] != STDOUT_FILENO )
@@ -3743,7 +3745,7 @@ send_error( int s, char* title, char* ex
 #ifdef USE_SSL
     SSL_free( ssl );
 #endif /* USE_SSL */
-    finish_request( 1 );
+    finish_request( 1, 0 );
     }
 
 
@@ -4653,7 +4655,7 @@ handle_write_timeout( int sig )
     syslog( LOG_INFO, "%.80s connection timed out writing", ntoa( &client_addr ) );
 #endif
     SC_CFPRINTF("%.80s connection timed out writing\n", ntoa(&client_addr));
-    finish_request( 1 );
+    finish_request( 1, 0 );
     }
 
 
