diff -urN work/iproute2-3.5.1/include/linux/fib_rules.h work/iproute2-3.5.1/include/linux/fib_rules.h
--- work/iproute2-3.5.1/include/linux/fib_rules.h	2012-08-13 17:13:58.000000000 +0200
+++ work/iproute2-3.5.1/include/linux/fib_rules.h	2019-01-26 22:45:51.924067550 +0100
@@ -48,6 +48,9 @@
 	FRA_UNUSED8,
 	FRA_TABLE,	/* Extended table id */
 	FRA_FWMASK,	/* mask for netfilter mark */
+#ifdef _SC_BUILD_
+	FRA_SCMARK,
+#endif
 	FRA_OIFNAME,
 	__FRA_MAX
 };
diff -urN work/iproute2-3.5.1/include/linux/netfilter_ipv4/ip_tables.h work/iproute2-3.5.1/include/linux/netfilter_ipv4/ip_tables.h
--- work/iproute2-3.5.1/include/linux/netfilter_ipv4/ip_tables.h	2012-08-13 17:13:58.000000000 +0200
+++ work/iproute2-3.5.1/include/linux/netfilter_ipv4/ip_tables.h	2019-01-26 22:54:32.958965822 +0100
@@ -14,46 +14,130 @@
 
 #ifndef _IPTABLES_H
 #define _IPTABLES_H
+#ifdef __KERNEL__
+#include <linux/if.h>
+#include <linux/types.h>
+#include <linux/in.h>
+#include <linux/ip.h>
+#include <linux/skbuff.h>
+#endif
+#include <linux/compiler.h>
 
 #include <linux/types.h>
 
 #include <linux/netfilter_ipv4.h>
 
-#include <linux/netfilter/x_tables.h>
+#define IPT_FUNCTION_MAXNAMELEN 30
+#define IPT_TABLE_MAXNAMELEN 32
+#define XT_TABLE_MAXNAMELEN IPT_TABLE_MAXNAMELEN
+struct ipt_entry_match
+{
+	union {
+		struct {
+			u_int16_t match_size;
+
+			/* Used by userspace */
+			char name[IPT_FUNCTION_MAXNAMELEN];
+		} user;
+		struct {
+			u_int16_t match_size;
+
+			/* Used inside the kernel */
+			struct ipt_match *match;
+		} kernel;
+
+		/* Total length */
+		u_int16_t match_size;
+	} u;
+
+	unsigned char data[0];
+};
+
+struct ipt_entry_target
+{
+	union {
+		struct {
+			u_int16_t target_size;
+
+			/* Used by userspace */
+			char name[IPT_FUNCTION_MAXNAMELEN];
+		} user;
+		struct {
+			u_int16_t target_size;
+
+			/* Used inside the kernel */
+			struct ipt_target *target;
+		} kernel;
+
+		/* Total length */
+		u_int16_t target_size;
+	} u;
+
+	unsigned char data[0];
+};
 
-#define IPT_FUNCTION_MAXNAMELEN XT_FUNCTION_MAXNAMELEN
-#define IPT_TABLE_MAXNAMELEN XT_TABLE_MAXNAMELEN
-#define ipt_match xt_match
-#define ipt_target xt_target
-#define ipt_table xt_table
-#define ipt_get_revision xt_get_revision
-#define ipt_entry_match xt_entry_match
-#define ipt_entry_target xt_entry_target
-#define ipt_standard_target xt_standard_target
+struct ipt_standard_target
+{
+	struct ipt_entry_target target;
+	int verdict;
+};
 #define ipt_error_target xt_error_target
-#define ipt_counters xt_counters
-#define IPT_CONTINUE XT_CONTINUE
-#define IPT_RETURN XT_RETURN
-
-/* This group is older than old (iptables < v1.4.0-rc1~89) */
-#include <linux/netfilter/xt_tcpudp.h>
-#define ipt_udp xt_udp
-#define ipt_tcp xt_tcp
-#define IPT_TCP_INV_SRCPT	XT_TCP_INV_SRCPT
-#define IPT_TCP_INV_DSTPT	XT_TCP_INV_DSTPT
-#define IPT_TCP_INV_FLAGS	XT_TCP_INV_FLAGS
-#define IPT_TCP_INV_OPTION	XT_TCP_INV_OPTION
-#define IPT_TCP_INV_MASK	XT_TCP_INV_MASK
-#define IPT_UDP_INV_SRCPT	XT_UDP_INV_SRCPT
-#define IPT_UDP_INV_DSTPT	XT_UDP_INV_DSTPT
-#define IPT_UDP_INV_MASK	XT_UDP_INV_MASK
+struct ipt_counters
+{
+	u_int64_t pcnt, bcnt;			/* Packet and byte counters */
+};
+/* CONTINUE verdict for targets */
+#define IPT_CONTINUE 0xFFFFFFFF
+
+/* For standard target */
+#define IPT_RETURN (-NF_MAX_VERDICT - 1)
+
+/* TCP matching stuff */
+struct ipt_tcp
+{
+	u_int16_t spts[2];			/* Source port range. */
+	u_int16_t dpts[2];			/* Destination port range. */
+	u_int8_t option;			/* TCP Option iff non-zero*/
+	u_int8_t flg_mask;			/* TCP flags mask byte */
+	u_int8_t flg_cmp;			/* TCP flags compare byte */
+	u_int8_t invflags;			/* Inverse flags */
+};
+
+/* Values for "inv" field in struct ipt_tcp. */
+#define IPT_TCP_INV_SRCPT	0x01	/* Invert the sense of source ports. */
+#define IPT_TCP_INV_DSTPT	0x02	/* Invert the sense of dest ports. */
+#define IPT_TCP_INV_FLAGS	0x04	/* Invert the sense of TCP flags. */
+#define IPT_TCP_INV_OPTION	0x08	/* Invert the sense of option test. */
+#define IPT_TCP_INV_MASK	0x0F	/* All possible flags. */
+
+/* UDP matching stuff */
+struct ipt_udp
+{
+	u_int16_t spts[2];			/* Source port range. */
+	u_int16_t dpts[2];			/* Destination port range. */
+	u_int8_t invflags;			/* Inverse flags */
+};
+
+/* Values for "invflags" field in struct ipt_udp. */
+#define IPT_UDP_INV_SRCPT	0x01	/* Invert the sense of source ports. */
+#define IPT_UDP_INV_DSTPT	0x02	/* Invert the sense of dest ports. */
+#define IPT_UDP_INV_MASK	0x03	/* All possible flags. */
 
 /* The argument to IPT_SO_ADD_COUNTERS. */
-#define ipt_counters_info xt_counters_info
+struct ipt_counters_info
+{
+	/* Which table. */
+	char name[IPT_TABLE_MAXNAMELEN];
+
+	unsigned int num_counters;
+
+	/* The counters (actually `number' of these). */
+	struct ipt_counters counters[0];
+};
 /* Standard return verdict, or do jump. */
-#define IPT_STANDARD_TARGET XT_STANDARD_TARGET
+#define IPT_STANDARD_TARGET ""
 /* Error verdict. */
-#define IPT_ERROR_TARGET XT_ERROR_TARGET
+#define IPT_ERROR_TARGET "ERROR"
 
 /* fn returns 0 to continue iteration */
 #define IPT_MATCH_ITERATE(e, fn, args...) \
@@ -83,8 +167,7 @@
 
 /* Values for "flag" field in struct ipt_ip (general ip structure). */
 #define IPT_F_FRAG		0x01	/* Set if rule is a fragment rule */
-#define IPT_F_GOTO		0x02	/* Set if jump is a goto */
-#define IPT_F_MASK		0x03	/* All possible flag bits mask. */
+#define IPT_F_MASK		0x01	/* All possible flag bits mask. */
 
 /* Values for "inv" field in struct ipt_ip. */
 #define IPT_INV_VIA_IN		0x01	/* Invert the sense of IN IFACE. */
@@ -93,7 +176,7 @@
 #define IPT_INV_SRCIP		0x08	/* Invert the sense of SRC IP. */
 #define IPT_INV_DSTIP		0x10	/* Invert the sense of DST OP. */
 #define IPT_INV_FRAG		0x20	/* Invert the sense of FRAG. */
-#define IPT_INV_PROTO		XT_INV_PROTO
+#define IPT_INV_PROTO		0x40	/* Invert the sense of PROTO. */
 #define IPT_INV_MASK		0x7F	/* All possible flag bits mask. */
 
 /* This structure defines each of the firewall rules.  Consists of 3
@@ -114,7 +198,7 @@
 	unsigned int comefrom;
 
 	/* Packet and byte counters. */
-	struct xt_counters counters;
+	struct ipt_counters counters;
 
 	/* The matches (if any), then the target. */
 	unsigned char elems[0];
@@ -123,21 +205,16 @@
 /*
  * New IP firewall options for [gs]etsockopt at the RAW IP level.
  * Unlike BSD Linux inherits IP options so you don't have to use a raw
- * socket for this. Instead we check rights in the calls.
- *
- * ATTENTION: check linux/in.h before adding new number here.
- */
-#define IPT_BASE_CTL		64
+ * socket for this. Instead we check rights in the calls. */
+#define IPT_BASE_CTL		64	/* base for firewall socket options */
 
 #define IPT_SO_SET_REPLACE	(IPT_BASE_CTL)
 #define IPT_SO_SET_ADD_COUNTERS	(IPT_BASE_CTL + 1)
 #define IPT_SO_SET_MAX		IPT_SO_SET_ADD_COUNTERS
 
-#define IPT_SO_GET_INFO			(IPT_BASE_CTL)
-#define IPT_SO_GET_ENTRIES		(IPT_BASE_CTL + 1)
-#define IPT_SO_GET_REVISION_MATCH	(IPT_BASE_CTL + 2)
-#define IPT_SO_GET_REVISION_TARGET	(IPT_BASE_CTL + 3)
-#define IPT_SO_GET_MAX			IPT_SO_GET_REVISION_TARGET
+#define IPT_SO_GET_INFO		(IPT_BASE_CTL)
+#define IPT_SO_GET_ENTRIES	(IPT_BASE_CTL + 1)
+#define IPT_SO_GET_MAX		IPT_SO_GET_ENTRIES
 
 /* ICMP matching stuff */
 struct ipt_icmp {
@@ -196,7 +275,7 @@
 	/* Number of counters (must be equal to current number of entries). */
 	unsigned int num_counters;
 	/* The old entries' counters. */
-	struct xt_counters *counters;
+	struct ipt_counters __user *counters;
 
 	/* The entries (hang off end: not really an array). */
 	struct ipt_entry entries[0];
@@ -224,4 +303,121 @@
 /*
  *	Main firewall chains definitions and global var's definitions.
  */
+#ifdef __KERNEL__
+
+#include <linux/init.h>
+extern void ipt_init(void) __init;
+
+struct ipt_match
+{
+	struct list_head list;
+
+	const char name[IPT_FUNCTION_MAXNAMELEN];
+
+	/* Return true or false: return FALSE and set *hotdrop = 1 to
+           force immediate packet drop. */
+	/* Arguments changed since 2.4, as this must now handle
+           non-linear skbs, using skb_copy_bits and
+           skb_ip_make_writable. */
+	int (*match)(const struct sk_buff *skb,
+		     const struct net_device *in,
+		     const struct net_device *out,
+		     const void *matchinfo,
+		     int offset,
+		     int *hotdrop);
+
+	/* Called when user tries to insert an entry of this type. */
+	/* Should return true or false. */
+	int (*checkentry)(const char *tablename,
+			  const struct ipt_ip *ip,
+			  void *matchinfo,
+			  unsigned int matchinfosize,
+			  unsigned int hook_mask);
+
+	/* Called when entry of this type deleted. */
+	void (*destroy)(void *matchinfo, unsigned int matchinfosize);
+
+	/* Set this to THIS_MODULE. */
+	struct module *me;
+};
+
+/* Registration hooks for targets. */
+struct ipt_target
+{
+	struct list_head list;
+
+	const char name[IPT_FUNCTION_MAXNAMELEN];
+
+	/* Called when user tries to insert an entry of this type:
+           hook_mask is a bitmask of hooks from which it can be
+           called. */
+	/* Should return true or false. */
+	int (*checkentry)(const char *tablename,
+			  const struct ipt_entry *e,
+			  void *targinfo,
+			  unsigned int targinfosize,
+			  unsigned int hook_mask);
+
+	/* Called when entry of this type deleted. */
+	void (*destroy)(void *targinfo, unsigned int targinfosize);
+
+	/* Returns verdict.  Argument order changed since 2.4, as this
+           must now handle non-linear skbs, using skb_copy_bits and
+           skb_ip_make_writable. */
+	unsigned int (*target)(struct sk_buff **pskb,
+			       const struct net_device *in,
+			       const struct net_device *out,
+			       unsigned int hooknum,
+			       const void *targinfo,
+			       void *userdata);
+
+	/* Set this to THIS_MODULE. */
+	struct module *me;
+};
+
+extern int ipt_register_target(struct ipt_target *target);
+extern void ipt_unregister_target(struct ipt_target *target);
+
+extern int ipt_register_match(struct ipt_match *match);
+extern void ipt_unregister_match(struct ipt_match *match);
+
+extern struct ipt_target *
+__ipt_find_target_lock(const char *name, int *error);
+extern void __ipt_mutex_up(void);
+
+/* Furniture shopping... */
+struct ipt_table
+{
+	struct list_head list;
+
+	/* A unique name... */
+	char name[IPT_TABLE_MAXNAMELEN];
+
+	/* Seed table: copied in register_table */
+	struct ipt_replace *table;
+
+	/* What hooks you will enter on */
+	unsigned int valid_hooks;
+
+	/* Lock for the curtain */
+	rwlock_t lock;
+
+	/* Man behind the curtain... */
+	struct ipt_table_info *private;
+
+	/* Set to THIS_MODULE. */
+	struct module *me;
+};
+
+extern int ipt_register_table(struct ipt_table *table);
+extern void ipt_unregister_table(struct ipt_table *table);
+extern unsigned int ipt_do_table(struct sk_buff **pskb,
+				 unsigned int hook,
+				 const struct net_device *in,
+				 const struct net_device *out,
+				 struct ipt_table *table,
+				 void *userdata);
+
+#define IPT_ALIGN(s) (((s) + (__alignof__(struct ipt_entry)-1)) & ~(__alignof__(struct ipt_entry)-1))
+#endif /*__KERNEL__*/
 #endif /* _IPTABLES_H */
diff -urN work/iproute2-3.5.1/include/linux/rtnetlink.h work/iproute2-3.5.1/include/linux/rtnetlink.h
--- work/iproute2-3.5.1/include/linux/rtnetlink.h	2012-08-13 17:13:58.000000000 +0200
+++ work/iproute2-3.5.1/include/linux/rtnetlink.h	2019-01-26 22:56:32.511728237 +0100
@@ -191,6 +191,7 @@
 	RTN_THROW,		/* Not in this table		*/
 	RTN_NAT,		/* Translate this address	*/
 	RTN_XRESOLVE,		/* Use external resolver	*/
+	RTN_FAILED_POLICY,      /* Source address failed policy */
 	__RTN_MAX
 };
 
@@ -283,6 +284,9 @@
 	RTA_MP_ALGO, /* no longer used */
 	RTA_TABLE,
 	RTA_MARK,
+#ifdef _SC_BUILD_
+	RTA_SCMARK,
+#endif
 	__RTA_MAX
 };
 
diff -urN work/iproute2-3.5.1/ip/ip6tunnel.c work/iproute2-3.5.1/ip/ip6tunnel.c
--- work/iproute2-3.5.1/ip/ip6tunnel.c	2012-08-13 17:13:58.000000000 +0200
+++ work/iproute2-3.5.1/ip/ip6tunnel.c	2019-01-26 22:57:30.596031014 +0100
@@ -43,6 +43,9 @@
 
 #define DEFAULT_TNL_HOP_LIMIT	(64)
 
+#define IN6ADDR_ANY_INIT { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }
+const struct in6_addr in6addr_any = IN6ADDR_ANY_INIT;
+
 static void usage(void) __attribute__((noreturn));
 
 static void usage(void)
diff -urN work/iproute2-3.5.1/ip/iprule.c work/iproute2-3.5.1/ip/iprule.c
--- work/iproute2-3.5.1/ip/iprule.c	2012-08-13 17:13:58.000000000 +0200
+++ work/iproute2-3.5.1/ip/iprule.c	2019-01-26 22:59:04.712443007 +0100
@@ -34,6 +34,9 @@
 {
 	fprintf(stderr, "Usage: ip rule [ list | add | del | flush ] SELECTOR ACTION\n");
 	fprintf(stderr, "SELECTOR := [ not ] [ from PREFIX ] [ to PREFIX ] [ tos TOS ] [ fwmark FWMARK[/MASK] ]\n");
+#ifdef _SC_BUILD_
+	fprintf(stderr, "[ scmark SCMARK ]\n");
+#endif
 	fprintf(stderr, "            [ iif STRING ] [ oif STRING ] [ pref NUMBER ]\n");
 	fprintf(stderr, "ACTION := [ table TABLE_ID ]\n");
 	fprintf(stderr, "          [ prohibit | reject | unreachable ]\n");
@@ -139,6 +142,16 @@
 		else
 			fprintf(fp, "fwmark 0x%x ", mark);
 	}
+#ifdef _SC_BUILD_
+	if (tb[RTA_SCMARK]) {
+		__u32 scmark = 0;
+
+		if (tb[RTA_SCMARK])
+			scmark = *(__u32*)RTA_DATA(tb[RTA_SCMARK]);
+
+			fprintf(fp, "scmark 0x%x ", scmark);
+	}
+#endif
 
 	if (tb[FRA_IFNAME]) {
 		fprintf(fp, "iif %s ", rta_getattr_str(tb[FRA_IFNAME]));
@@ -291,7 +304,22 @@
 					invarg("fwmask value is invalid\n", slash+1);
 				addattr32(&req.n, sizeof(req), FRA_FWMASK, fwmask);
 			}
-		} else if (matches(*argv, "realms") == 0) {
+
+		}
+#ifdef _SC_BUILD_ 
+		else if (strcmp(*argv, "scmark") == 0) {
+			char *slash;
+			__u32 scmark;
+			NEXT_ARG();
+			if ((slash = strchr(*argv, '/')) != NULL)
+				*slash = '\0';
+			if (get_u32(&scmark, *argv, 0))
+				invarg("scmark value is invalid\n", *argv);
+			addattr32(&req.n, sizeof(req), RTA_SCMARK, scmark);
+
+		}
+#endif
+		else if (matches(*argv, "realms") == 0) {
 			__u32 realm;
 			NEXT_ARG();
 			if (get_rt_realms(&realm, *argv))
diff -urN work/iproute2-3.5.1/tc/f_fw.c work/iproute2-3.5.1/tc/f_fw.c
--- work/iproute2-3.5.1/tc/f_fw.c	2012-08-13 17:13:58.000000000 +0200
+++ work/iproute2-3.5.1/tc/f_fw.c	2019-01-26 23:00:04.208659759 +0100
@@ -102,6 +102,11 @@
 			}
 			strncpy(d, *argv, sizeof (d) - 1);
 			addattr_l(n, MAX_MSG, TCA_FW_INDEV, d, strlen(d) + 1);
+		} else if (strcmp(*argv, "mask") == 0) {
+			unsigned long mask;
+			NEXT_ARG();
+			mask = (unsigned long)strtol(*argv, NULL, 0);
+			addattr_l(n, 4096, TCA_FW_MASK, &mask, 4);
 		} else if (strcmp(*argv, "help") == 0) {
 			explain();
 			return -1;
diff -urN work/iproute2-3.5.1/tc/Makefile work/iproute2-3.5.1/tc/Makefile
--- work/iproute2-3.5.1/tc/Makefile	2018-08-13 21:11:32.000000000 +0200
+++ work/iproute2-3.5.1/tc/Makefile	2018-10-06 23:59:22.967035093 +0200
@@ -76,7 +68,7 @@
 TCLIB += tc_estimator.o
 TCLIB += tc_stab.o
 
-CFLAGS += -DCONFIG_GACT -DCONFIG_GACT_PROB
+CFLAGS += -DCONFIG_GACT -DCONFIG_GACT_PROB -I$(KERNEL_INC)
 ifneq ($(IPT_LIB_DIR),)
 	CFLAGS += -DIPT_LIB_DIR=\"$(IPT_LIB_DIR)\"
 endif
diff -urN work/iproute2-3.5.1/tc/tc_util.c work/iproute2-3.5.1/tc/tc_util.c
--- work/iproute2-3.5.1/tc/tc_util.c	2012-08-13 17:13:58.000000000 +0200
+++ work/iproute2-3.5.1/tc/tc_util.c	2019-01-26 23:01:03.192845584 +0100
@@ -39,6 +39,7 @@
 	return lib_dir;
 }
 
+#define rint(x) x
 int get_qdisc_handle(__u32 *h, const char *str)
 {
 	__u32 maj;
@@ -146,7 +147,9 @@
 int get_rate(unsigned *rate, const char *str)
 {
 	char *p;
-	double bps = strtod(str, &p);
+// strtod not work
+//	double bps = strtod(str, &p);
+	double bps = (double) strtol(str, &p, 0);
 	const struct rate_suffix *s;
 
 	if (p == str)
