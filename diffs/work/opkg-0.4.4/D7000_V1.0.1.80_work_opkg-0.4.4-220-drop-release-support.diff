diff -urN work/opkg-0.4.4/opkg-0.4.4/libopkg/Makefile.am work/opkg-0.4.4/opkg-0.4.4/libopkg/Makefile.am
--- work/opkg-0.4.4/opkg-0.4.4/libopkg/Makefile.am	2016-12-22 18:38:14.000000000 +0100
+++ work/opkg-0.4.4/opkg-0.4.4/libopkg/Makefile.am	2017-03-24 23:46:06.404090221 +0100
@@ -6,24 +6,24 @@
 
 libopkg_includedir=$(includedir)/libopkg
 
-opkg_headers = cksum_list.h conffile.h conffile_list.h file_list.h \
+opkg_headers = conffile.h conffile_list.h file_list.h \
 	file_util.h hash_table.h list.h md5.h nv_pair.h nv_pair_list.h \
 	opkg_archive.h opkg_cmd.h opkg_conf.h opkg_configure.h \
 	opkg_download.h opkg_install.h opkg_message.h \
 	opkg_remove.h opkg_utils.h parse_util.h pkg.h \
 	pkg_depends.h pkg_dest.h pkg_dest_list.h pkg_extract.h pkg_hash.h \
-	pkg_parse.h pkg_src.h pkg_src_list.h pkg_vec.h release.h \
-	release_parse.h sha256.h sprintf_alloc.h str_list.h void_list.h \
+	pkg_parse.h pkg_src.h pkg_src_list.h pkg_vec.h \
+	sha256.h sprintf_alloc.h str_list.h void_list.h \
 	xregex.h xsystem.h xfuncs.h opkg_verify.h string_util.h \
 	opkg_solver.h
 
 opkg_sources = opkg_cmd.c opkg_configure.c opkg_download.c \
-	opkg_install.c opkg_remove.c opkg_conf.c release.c \
-	release_parse.c opkg_utils.c pkg.c pkg_depends.c pkg_extract.c \
+	opkg_install.c opkg_remove.c opkg_conf.c \
+	opkg_utils.c pkg.c pkg_depends.c pkg_extract.c \
 	hash_table.c pkg_hash.c pkg_parse.c pkg_vec.c conffile.c \
 	conffile_list.c nv_pair.c nv_pair_list.c pkg_dest.c pkg_dest_list.c \
 	pkg_src.c pkg_src_list.c str_list.c void_list.c file_list.c \
-	file_util.c opkg_message.c md5.c parse_util.c cksum_list.c \
+	file_util.c opkg_message.c md5.c parse_util.c \
 	sprintf_alloc.c xregex.c xsystem.c xfuncs.c opkg_archive.c \
 	opkg_verify.c string_util.c
 
diff -urN work/opkg-0.4.4/opkg-0.4.4/libopkg/cksum_list.c work/opkg-0.4.4/opkg-0.4.4/libopkg/cksum_list.c
--- work/opkg-0.4.4/opkg-0.4.4/libopkg/cksum_list.c	2018-02-19 18:08:43.000000000 +0100
+++ work/opkg-0.4.4/opkg-0.4.4/libopkg/cksum_list.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,90 +0,0 @@
-/* vi: set expandtab sw=4 sts=4: */
-/* cksum_lis.c - the opkg package management system
-
-   Copyright (C) 2010,2011 Javier Palacios
-
-   SPDX-License-Identifier: GPL-2.0-or-later
-
-   This program is free software; you can redistribute it and/or
-   modify it under the terms of the GNU General Public License as
-   published by the Free Software Foundation; either version 2, or (at
-   your option) any later version.
-
-   This program is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-*/
-
-#include "config.h"
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include "cksum_list.h"
-#include "xfuncs.h"
-
-static int cksum_init(cksum_t * cksum, char **itemlist)
-{
-    cksum->value = xstrdup(*itemlist++);
-    cksum->size = atoi(*itemlist++);
-    cksum->name = xstrdup(*itemlist++);
-
-    return 0;
-}
-
-static void cksum_deinit(cksum_t * cksum)
-{
-    free(cksum->name);
-    cksum->name = NULL;
-
-    free(cksum->value);
-    cksum->value = NULL;
-}
-
-void cksum_list_init(cksum_list_t * list)
-{
-    void_list_init((void_list_t *) list);
-}
-
-void cksum_list_deinit(cksum_list_t * list)
-{
-    cksum_list_elt_t *iter, *n;
-    cksum_t *cksum;
-
-    list_for_each_entry_safe(iter, n, &list->head, node) {
-        cksum = (cksum_t *) iter->data;
-        cksum_deinit(cksum);
-
-        /* malloced in cksum_list_append */
-        free(cksum);
-        iter->data = NULL;
-    }
-    void_list_deinit((void_list_t *) list);
-}
-
-cksum_t *cksum_list_append(cksum_list_t * list, char **itemlist)
-{
-    /* freed in cksum_list_deinit */
-    cksum_t *cksum = xcalloc(1, sizeof(cksum_t));
-    cksum_init(cksum, itemlist);
-
-    void_list_append((void_list_t *) list, cksum);
-
-    return cksum;
-}
-
-const cksum_t *cksum_list_find(cksum_list_t * list, const char *name)
-{
-    cksum_list_elt_t *iter;
-    cksum_t *cksum;
-
-    list_for_each_entry(iter, &list->head, node) {
-        cksum = (cksum_t *) iter->data;
-        if (strcmp(cksum->name, name) == 0) {
-            return cksum;
-        }
-    }
-    return NULL;
-}
diff -urN work/opkg-0.4.4/opkg-0.4.4/libopkg/cksum_list.h work/opkg-0.4.4/opkg-0.4.4/libopkg/cksum_list.h
--- work/opkg-0.4.4/opkg-0.4.4/libopkg/cksum_list.h	2018-02-19 18:08:43.000000000 +0100
+++ work/opkg-0.4.4/opkg-0.4.4/libopkg/cksum_list.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,53 +0,0 @@
-/* vi: set expandtab sw=4 sts=4: */
-/* cksum_list.h - the opkg package management system
-
-   Copyright (C) 2010,2011 Javier Palacios
-
-   SPDX-License-Identifier: GPL-2.0-or-later
-
-   This program is free software; you can redistribute it and/or
-   modify it under the terms of the GNU General Public License as
-   published by the Free Software Foundation; either version 2, or (at
-   your option) any later version.
-
-   This program is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-*/
-
-#ifndef CKSUM_LIST_H
-#define CKSUM_LIST_H
-
-#include "void_list.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-typedef struct {
-    char *name;
-    char *value;
-    int size;
-} cksum_t;
-
-typedef struct void_list_elt cksum_list_elt_t;
-
-typedef struct void_list cksum_list_t;
-
-static inline int cksum_list_empty(cksum_list_t * list)
-{
-    return void_list_empty((void_list_t *) list);
-}
-
-void cksum_list_init(cksum_list_t * list);
-void cksum_list_deinit(cksum_list_t * list);
-
-cksum_t *cksum_list_append(cksum_list_t * list, char **itemlist);
-const cksum_t *cksum_list_find(cksum_list_t * list, const char *name);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif                          /* CKSUM_LIST_H */
diff -urN work/opkg-0.4.4/opkg-0.4.4/libopkg/opkg_cmd.c work/opkg-0.4.4/opkg-0.4.4/libopkg/opkg_cmd.c
--- work/opkg-0.4.4/opkg-0.4.4/libopkg/opkg_cmd.c	2018-02-19 18:08:43.000000000 +0100
+++ work/opkg-0.4.4/opkg-0.4.4/libopkg/opkg_cmd.c	2018-03-19 23:24:40.857986605 +0100
@@ -31,7 +31,6 @@
 #include "opkg_conf.h"
 #include "opkg_cmd.h"
 #include "opkg_message.h"
-#include "release.h"
 #include "pkg.h"
 #include "pkg_dest.h"
 #include "pkg_parse.h"
@@ -114,41 +114,6 @@
         return -1;
     }
 
-    for (iter = void_list_first(&opkg_config->dist_src_list); iter;
-            iter = void_list_next(&opkg_config->dist_src_list, iter)) {
-        char *url, *list_file_name;
-
-        src = (pkg_src_t *) iter->data;
-
-        sprintf_alloc(&url, "%s/dists/%s/Release", src->value, src->name);
-
-        sprintf_alloc(&list_file_name, "%s/%s", opkg_config->lists_dir,
-                      src->name);
-        err = opkg_download(url, list_file_name, NULL, NULL);
-        if (!err) {
-            opkg_msg(NOTICE, "Downloaded release files for dist %s.\n",
-                     src->name);
-            release_t *release = release_new();
-            err = release_init_from_file(release, list_file_name);
-            if (!err) {
-                if (!release_comps_supported(release, src->extra_data))
-                    err = -1;
-            }
-            if (!err) {
-                err = release_download(release, src, opkg_config->lists_dir, tmp);
-            }
-            release_deinit(release);
-            if (err)
-                unlink(list_file_name);
-        }
-
-        if (err)
-            failures++;
-
-        free(list_file_name);
-        free(url);
-    }
-
     for (iter = void_list_first(&opkg_config->pkg_src_list); iter;
             iter = void_list_next(&opkg_config->pkg_src_list, iter)) {
         src = (pkg_src_t *) iter->data;
diff -urN work/opkg-0.4.4/opkg-0.4.4/libopkg/pkg_hash.c work/opkg-0.4.4/opkg-0.4.4/libopkg/pkg_hash.c
--- work/opkg-0.4.4/opkg-0.4.4/libopkg/pkg_hash.c	2018-02-19 18:08:43.000000000 +0100
+++ work/opkg-0.4.4/opkg-0.4.4/libopkg/pkg_hash.c	2018-03-19 22:56:46.405529250 +0100
@@ -25,7 +25,6 @@
 #include <fnmatch.h>
 
 #include "hash_table.h"
-#include "release.h"
 #include "pkg.h"
 #include "opkg_message.h"
 #include "opkg_archive.h"
@@ -167,37 +167,6 @@
     return ret;
 }
 
-static int dist_hash_add_from_file(pkg_src_t * dist)
-{
-    nv_pair_list_elt_t *l;
-    char *list_file, *subname;
-    int r;
-
-    list_for_each_entry(l, &opkg_config->arch_list.head, node) {
-        nv_pair_t *nv = (nv_pair_t *) l->data;
-        sprintf_alloc(&subname, "%s-%s", dist->name, nv->name);
-        sprintf_alloc(&list_file, "%s/%s", opkg_config->lists_dir, subname);
-
-        if (file_exists(list_file)) {
-            r = pkg_hash_add_from_file(list_file, dist, NULL, 0);
-            if (r != 0) {
-                free(list_file);
-                return -1;
-            }
-            char *subpath, *distribution, *component;
-            distribution = strtok(dist->name, "-");
-            component = strtok(NULL, "-");
-            sprintf_alloc(&subpath, "dists/%s/%s/binary-%s", distribution, component, nv->name);
-            pkg_src_list_append(&opkg_config->pkg_src_list, subname,
-                                dist->value, NULL, subpath, 0);
-        }
-
-        free(list_file);
-    }
-
-    return 0;
-}
-
 void pkg_hash_init(void)
 {
     hash_table_init("pkg-hash", &opkg_config->pkg_hash,
@@ -216,50 +188,12 @@
 int pkg_hash_load_feeds(void)
 {
     pkg_src_list_elt_t *iter;
-    pkg_src_t *src, *subdist;
+    pkg_src_t *src;
     char *list_file;
     int r;
 
     opkg_msg(INFO, "\n");
 
-    for (iter = void_list_first(&opkg_config->dist_src_list); iter;
-            iter = void_list_next(&opkg_config->dist_src_list, iter)) {
-
-        src = (pkg_src_t *) iter->data;
-
-        sprintf_alloc(&list_file, "%s/%s%s", opkg_config->lists_dir, src->name,
-                      opkg_config->compress_list_files ? ".gz" : "");
-        if (file_exists(list_file)) {
-            unsigned int i;
-            release_t *release = release_new();
-            r = release_init_from_file(release, list_file);
-            if (r != 0) {
-                free(list_file);
-                return -1;
-            }
-
-            unsigned int ncomp;
-            const char **comps = release_comps(release, &ncomp);
-            subdist = (pkg_src_t *) xmalloc(sizeof(pkg_src_t));
-            memcpy(subdist, src, sizeof(pkg_src_t));
-
-            for (i = 0; i < ncomp; i++) {
-                subdist->name = NULL;
-                sprintf_alloc(&subdist->name, "%s-%s", src->name, comps[i]);
-                r = dist_hash_add_from_file(subdist);
-                if (r != 0) {
-                    free(subdist->name);
-                    free(subdist);
-                    free(list_file);
-                    return -1;
-                }
-            }
-            free(subdist->name);
-            free(subdist);
-        }
-        free(list_file);
-    }
-
     for (iter = void_list_first(&opkg_config->pkg_src_list); iter;
             iter = void_list_next(&opkg_config->pkg_src_list, iter)) {
 
diff -urN work/opkg-0.4.4/opkg-0.4.4/libopkg/release.c work/opkg-0.4.4/opkg-0.4.4/libopkg/release.c
--- work/opkg-0.4.4/opkg-0.4.4/libopkg/release.c	2018-02-19 18:08:43.000000000 +0100
+++ work/opkg-0.4.4/opkg-0.4.4/libopkg/release.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,375 +0,0 @@
-/* vi: set expandtab sw=4 sts=4: */
-/* release.c - the opkg package management system
-
-   Copyright (C) 2010,2011 Javier Palacios
-
-   SPDX-License-Identifier: GPL-2.0-or-later
-
-   This program is free software; you can redistribute it and/or
-   modify it under the terms of the GNU General Public License as
-   published by the Free Software Foundation; either version 2, or (at
-   your option) any later version.
-
-   This program is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-*/
-
-#include "config.h"
-
-#include <unistd.h>
-#include <ctype.h>
-#include <stdlib.h>
-#include <sys/stat.h>
-
-#include "opkg_message.h"
-#include "release.h"
-#include "opkg_utils.h"
-#include "xfuncs.h"
-#include "opkg_archive.h"
-
-#include "opkg_download.h"
-#include "sprintf_alloc.h"
-
-#include "release_parse.h"
-
-#include "parse_util.h"
-#include "file_util.h"
-
-static void release_init(release_t * release)
-{
-    release->name = NULL;
-    release->datestring = NULL;
-    release->architectures = NULL;
-    release->architectures_count = 0;
-    release->components = NULL;
-    release->components_count = 0;
-    release->complist = NULL;
-    release->complist_count = 0;
-}
-
-static const char *item_in_list(const char *comp, char **complist, unsigned int count)
-{
-    unsigned int i;
-
-    if (!complist)
-        return comp;
-
-    for (i = 0; i < count; i++) {
-        if (strcmp(comp, complist[i]) == 0)
-            return complist[i];
-    }
-
-    return NULL;
-}
-
-static int release_arch_supported(release_t * release)
-{
-    nv_pair_list_elt_t *l;
-
-    list_for_each_entry(l, &opkg_config->arch_list.head, node) {
-        nv_pair_t *nv = (nv_pair_t *) l->data;
-        const char *arch = item_in_list(nv->name, release->architectures,
-                release->architectures_count);
-        if (arch) {
-            opkg_msg(DEBUG, "Arch %s (priority %s) supported for dist %s.\n",
-                     nv->name, nv->value, release->name);
-            return 1;
-        }
-    }
-
-    return 0;
-}
-
-static int release_get_size(release_t * release, const char *pathname)
-{
-    const cksum_t *cksum;
-
-    if (release->md5sums) {
-        cksum = cksum_list_find(release->md5sums, pathname);
-        return cksum->size;
-    }
-#ifdef HAVE_SHA256
-    if (release->sha256sums) {
-        cksum = cksum_list_find(release->sha256sums, pathname);
-        return cksum->size;
-    }
-#endif
-
-    return -1;
-}
-
-static const char *release_get_md5(release_t * release, const char *pathname)
-{
-    const cksum_t *cksum;
-
-    if (release->md5sums) {
-        cksum = cksum_list_find(release->md5sums, pathname);
-        return cksum->value;
-    }
-
-    return '\0';
-}
-
-#ifdef HAVE_SHA256
-static const char *release_get_sha256(release_t * release, const char *pathname)
-{
-    const cksum_t *cksum;
-
-    if (release->sha256sums) {
-        cksum = cksum_list_find(release->sha256sums, pathname);
-        return cksum->value;
-    }
-
-    return '\0';
-}
-#endif
-
-int release_verify_file(release_t * release, const char *file_name,
-                        const char *pathname)
-{
-    struct stat f_info;
-    char *f_md5 = NULL;
-    const char *md5 = release_get_md5(release, pathname);
-#ifdef HAVE_SHA256
-    char *f_sha256 = NULL;
-    const char *sha256 = release_get_sha256(release, pathname);
-#endif
-    int ret = 0;
-    int r;
-
-    r = stat(file_name, &f_info);
-    if ((r != 0) || (f_info.st_size != release_get_size(release, pathname))) {
-        opkg_msg(ERROR, "Size verification failed for %s - %s.\n",
-                 release->name, pathname);
-        ret = 1;
-    } else {
-
-        f_md5 = file_md5sum_alloc(file_name);
-#ifdef HAVE_SHA256
-        f_sha256 = file_sha256sum_alloc(file_name);
-#endif
-
-        if (md5 && strcmp(md5, f_md5)) {
-            opkg_msg(ERROR, "MD5 verification failed for %s - %s.\n",
-                     release->name, pathname);
-            ret = 1;
-#ifdef HAVE_SHA256
-        } else if (sha256 && strcmp(sha256, f_sha256)) {
-            opkg_msg(ERROR, "SHA256 verification failed for %s - %s.\n",
-                     release->name, pathname);
-            ret = 1;
-#endif
-        }
-
-    }
-
-    free(f_md5);
-#ifdef HAVE_SHA256
-    free(f_sha256);
-#endif
-
-    return ret;
-}
-
-release_t *release_new(void)
-{
-    release_t *release;
-
-    release = xcalloc(1, sizeof(release_t));
-    release_init(release);
-
-    return release;
-}
-
-void release_deinit(release_t * release)
-{
-    unsigned int i;
-
-    free(release->name);
-    free(release->datestring);
-
-    for (i = 0; i < release->architectures_count; i++) {
-        free(release->architectures[i]);
-    }
-    free(release->architectures);
-
-    for (i = 0; i < release->components_count; i++) {
-        free(release->components[i]);
-    }
-    free(release->components);
-
-    for (i = 0; i < release->complist_count; i++) {
-        free(release->complist[i]);
-    }
-    free(release->complist);
-
-}
-
-int release_init_from_file(release_t * release, const char *filename)
-{
-    int err = 0;
-    FILE *release_file = NULL;
-    char *bp = NULL;
-
-    if (opkg_config->compress_list_files) {
-        struct opkg_ar *ar;
-        size_t size;
-
-        ar = ar_open_compressed_file(filename);
-        if (!ar)
-            return -1;
-
-        FILE *mfp = open_memstream(&bp, &size);
-
-        if (ar_copy_to_stream(ar, mfp) < 0) {
-            opkg_perror(ERROR, "Failed to open %s", filename);
-            err = -1;
-            goto cleanup;
-        }
-        fclose(mfp);
-
-        release_file = fmemopen(bp, size, "r");
-        if (release_file == NULL) {
-            opkg_perror(ERROR, "Failed to open memory buffer: %s\n", strerror(errno));
-            err = -1;
-            goto cleanup;
-        }
-    } else {
-        release_file = fopen(filename, "r");
-        if (release_file == NULL) {
-            opkg_perror(ERROR, "Failed to open %s", filename);
-            return -1;
-        }
-    }
-
-    err = release_parse_from_stream(release, release_file);
-    if (!err) {
-        if (!release_arch_supported(release)) {
-            opkg_msg(ERROR, "No valid architecture found on Release file.\n");
-            err = -1;
-        }
-    }
-
-cleanup:
-    fclose(release_file);
-    free(bp);
-    return err;
-}
-
-int release_comps_supported(release_t * release, const char *complist)
-{
-    int ret = 1;
-    unsigned int i;
-
-    if (complist) {
-        release->complist = parse_list(complist, &release->complist_count,
-                ' ', 1);
-        for (i = 0; i < release->complist_count; i++) {
-            const char *arch = item_in_list (release->complist[i],
-                    release->components,
-                    release->components_count);
-            if (!arch) {
-                opkg_msg(ERROR, "Component %s not supported for dist %s.\n",
-                         release->complist[i], release->name);
-                ret = 0;
-            }
-        }
-    }
-
-    return ret;
-}
-
-const char **release_comps(release_t * release, unsigned int *count)
-{
-    char **comps = release->complist;
-
-    if (!comps) {
-        comps = release->components;
-        *count = release->components_count;
-    } else {
-        *count = release->complist_count;
-    }
-
-    return (const char **)comps;
-}
-
-int release_download(release_t * release, pkg_src_t * dist, char *lists_dir,
-                     char *tmpdir)
-{
-    int ret = 0;
-    unsigned int ncomp;
-    const char **comps = release_comps(release, &ncomp);
-    nv_pair_list_elt_t *l;
-    unsigned int i;
-
-    for (i = 0; i < ncomp; i++) {
-        int err = 0;
-        char *prefix;
-
-        sprintf_alloc(&prefix, "%s/dists/%s/%s/binary", dist->value, dist->name,
-                      comps[i]);
-
-        list_for_each_entry(l, &opkg_config->arch_list.head, node) {
-            char *url;
-            char *list_file_name;
-            char *subpath = NULL;
-
-            nv_pair_t *nv = (nv_pair_t *) l->data;
-
-            sprintf_alloc(&list_file_name, "%s/%s-%s-%s", lists_dir, dist->name,
-                          comps[i], nv->name);
-
-            sprintf_alloc(&subpath, "%s/binary-%s/%s", comps[i], nv->name,
-                          dist->gzip ? "Packages.gz" : "Packages");
-
-            if (dist->gzip) {
-                char *cache_location;
-                sprintf_alloc(&url, "%s-%s/Packages.gz", prefix, nv->name);
-                cache_location = opkg_download_cache(url, NULL, NULL);
-                if (cache_location) {
-                    err = release_verify_file(release, cache_location, subpath);
-                    if (err) {
-                        unlink(list_file_name);
-                    } else {
-                        if (opkg_config->compress_list_files) {
-                            strcat(list_file_name, ".gz");
-                            err = file_copy(cache_location, list_file_name);
-                        } else {
-                            err = file_decompress(cache_location, list_file_name);
-                        }
-                        if (err) {
-                            opkg_msg(ERROR, "Couldn't %s %s",
-                                    (opkg_config->compress_list_files) ? "copy" : "decompress", url);
-                        }
-                    }
-                }
-                free(url);
-                free(cache_location);
-            }
-
-            if (!dist->gzip || err) {
-                sprintf_alloc(&url, "%s-%s/Packages", prefix, nv->name);
-                err = opkg_download(url, list_file_name, NULL, NULL);
-                if (!err) {
-                    if (opkg_config->compress_list_files)
-                        err = file_gz_compress(list_file_name);
-                    err = release_verify_file(release, list_file_name, subpath);
-                    if (err)
-                        unlink(list_file_name);
-                }
-                free(url);
-            }
-
-            free(list_file_name);
-        }
-
-        if (err)
-            ret = 1;
-
-        free(prefix);
-    }
-
-    return ret;
-}
diff -urN work/opkg-0.4.4/opkg-0.4.4/libopkg/release.h work/opkg-0.4.4/opkg-0.4.4/libopkg/release.h
--- work/opkg-0.4.4/opkg-0.4.4/libopkg/release.h	2018-02-19 18:08:43.000000000 +0100
+++ work/opkg-0.4.4/opkg-0.4.4/libopkg/release.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,56 +0,0 @@
-/* vi: set expandtab sw=4 sts=4: */
-/* release.h - the opkg package management system
-
-   Copyright (C) 2010,2011 Javier Palacios
-
-   SPDX-License-Identifier: GPL-2.0-or-later
-
-   This program is free software; you can redistribute it and/or
-   modify it under the terms of the GNU General Public License as
-   published by the Free Software Foundation; either version 2, or (at
-   your option) any later version.
-
-   This program is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-*/
-
-#ifndef RELEASE_H
-#define RELEASE_H
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#include <stdio.h>
-#include "pkg.h"
-#include "cksum_list.h"
-
-struct release {
-    char *name;
-    char *datestring;
-    char **architectures;
-    unsigned int architectures_count;
-    char **components;
-    unsigned int components_count;
-    cksum_list_t *md5sums;
-    cksum_list_t *sha256sums;
-    char **complist;
-    unsigned int complist_count;
-};
-
-typedef struct release release_t;
-
-release_t *release_new(void);
-void release_deinit(release_t * release);
-int release_init_from_file(release_t * release, const char *filename);
-int release_comps_supported(release_t * release, const char *complist);
-int release_download(release_t * release, pkg_src_t * dist, char *lists_dir,
-                     char *tmpdir);
-const char **release_comps(release_t * release, unsigned int *count);
-
-#ifdef __cplusplus
-}
-#endif
-#endif                          /* RELEASE_H */
diff -urN work/opkg-0.4.4/opkg-0.4.4/libopkg/release_parse.c work/opkg-0.4.4/opkg-0.4.4/libopkg/release_parse.c
--- work/opkg-0.4.4/opkg-0.4.4/libopkg/release_parse.c	2018-02-19 18:08:43.000000000 +0100
+++ work/opkg-0.4.4/opkg-0.4.4/libopkg/release_parse.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,130 +0,0 @@
-/* vi: set expandtab sw=4 sts=4: */
-/* release_parse.c - the opkg package management system
-
-   Copyright (C) 2010,2011 Javier Palacios
-
-   SPDX-License-Identifier: GPL-2.0-or-later
-
-   This program is free software; you can redistribute it and/or
-   modify it under the terms of the GNU General Public License as
-   published by the Free Software Foundation; either version 2, or (at
-   your option) any later version.
-
-   This program is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-*/
-
-#include "config.h"
-
-#include <stdio.h>
-#include <stdlib.h>
-
-#include "opkg_message.h"
-#include "release.h"
-#include "release_parse.h"
-#include "xfuncs.h"
-#include "parse_util.h"
-
-static int release_parse_line(void *ptr, const char *line, uint mask)
-{
-    release_t *release = (release_t *) ptr;
-
-    int ret = 0;
-    unsigned int count = 0;
-    char **list = 0;
-    static int reading_md5sums = 0;
-#ifdef HAVE_SHA256
-    static int reading_sha256sums = 0;
-#endif
-
-    switch (*line) {
-    case 'A':
-        if (is_field("Architectures", line)) {
-            release->architectures = parse_list(line, &release->architectures_count,
-                    ' ', 0);
-        }
-        break;
-
-    case 'C':
-        if (is_field("Codename", line)) {
-            release->name = parse_simple("Codename", line);
-        } else if (is_field("Components", line)) {
-            release->components = parse_list(line, &release->components_count,
-                    ' ', 0);
-        }
-        break;
-
-    case 'D':
-        if (is_field("Date", line)) {
-            release->datestring = parse_simple("Date", line);
-        }
-        break;
-
-    case 'M':
-        if (is_field("MD5Sum", line)) {
-            reading_md5sums = 1;
-            if (release->md5sums == NULL) {
-                release->md5sums = xcalloc(1, sizeof(cksum_list_t));
-                cksum_list_init(release->md5sums);
-            }
-            goto dont_reset_flags;
-        }
-        break;
-
-#ifdef HAVE_SHA256
-    case 'S':
-        if (is_field("SHA256", line)) {
-            reading_sha256sums = 1;
-            if (release->sha256sums == NULL) {
-                release->sha256sums = xcalloc(1, sizeof(cksum_list_t));
-                cksum_list_init(release->sha256sums);
-            }
-            goto dont_reset_flags;
-        }
-        break;
-#endif
-
-    case ' ':
-        if (reading_md5sums) {
-            list = parse_list(line, &count, ' ', 1);
-            cksum_list_append(release->md5sums, list);
-            goto dont_reset_flags;
-        }
-#ifdef HAVE_SHA256
-        else if (reading_sha256sums) {
-            list = parse_list(line, &count, ' ', 1);
-            cksum_list_append(release->sha256sums, list);
-            goto dont_reset_flags;
-        }
-#endif
-        break;
-
-    default:
-        ret = 0;
-    }
-
-    reading_md5sums = 0;
-#ifdef HAVE_SHA256
-    reading_sha256sums = 0;
-#endif
-
- dont_reset_flags:
-
-    return ret;
-}
-
-int release_parse_from_stream(release_t * release, FILE * fp)
-{
-    int ret;
-    char *buf;
-    const size_t len = 4096;
-
-    buf = xmalloc(len);
-    ret = parse_from_stream_nomalloc(release_parse_line, release, fp, 0, &buf,
-                                     len);
-    free(buf);
-
-    return ret;
-}
diff -urN work/opkg-0.4.4/opkg-0.4.4/libopkg/release_parse.h work/opkg-0.4.4/opkg-0.4.4/libopkg/release_parse.h
--- work/opkg-0.4.4/opkg-0.4.4/libopkg/release_parse.h	2018-02-19 18:08:43.000000000 +0100
+++ work/opkg-0.4.4/opkg-0.4.4/libopkg/release_parse.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,31 +0,0 @@
-/* vi: set expandtab sw=4 sts=4: */
-/* release_parse.h - the opkg package management system
-
-   Copyright (C) 2010,2011 Javier Palacios
-
-   SPDX-License-Identifier: GPL-2.0-or-later
-
-   This program is free software; you can redistribute it and/or
-   modify it under the terms of the GNU General Public License as
-   published by the Free Software Foundation; either version 2, or (at
-   your option) any later version.
-
-   This program is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-*/
-
-#ifndef RELEASE_PARSE_H
-#define RELEASE_PARSE_H
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-int release_parse_from_stream(release_t * release, FILE * fp);
-
-#ifdef __cplusplus
-}
-#endif
-#endif                          /* RELEASE_PARSE_H */
