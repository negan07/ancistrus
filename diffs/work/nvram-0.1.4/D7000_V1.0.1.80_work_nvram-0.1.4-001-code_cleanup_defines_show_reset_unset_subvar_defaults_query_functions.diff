diff -urN work/nvram-0.1.4/nvram.c work/nvram-0.1.4/nvram.c
--- work/nvram-0.1.4/nvram.c	2016-10-11 17:53:07.000000000 +0200
+++ work/nvram-0.1.4/nvram.c	2017-02-05 21:24:36.082726345 +0100
@@ -7,12 +7,17 @@
 #include <unistd.h>
 #include <sys/ioctl.h>
 #include <sys/sysinfo.h>
-//#include <linux/mtd/mtd.h>
 #include <sys/file.h>
 #include "nvram.h"
 #include <stdarg.h>
 #include "nvram_lock.h"
+#include <syslog.h>
+#define NETGEAR_SYSLOG(fmt, args...)	syslog(LOG_INFO, fmt, ##args)
+#ifndef LOCAL
 #define BASE_PATH "/tmp/nv/"
+#else
+#define BASE_PATH LROOT "/tmp/nv/"
+#endif
 #define BASE_PATH_LEN 8  // strlen(BASE_PATH) 
 
 struct nv_entry{
@@ -140,10 +145,10 @@
 static unsigned long crc32(char *data, int length)
 {
 	unsigned long crc, poly;
-	long crcTable[256];
+	long crcTable[KEY_BUFF_SIZE];
 	int i, j;
 	poly = 0xEDB88320L;
-	for (i=0; i<256; i++) {
+	for (i=0; i<KEY_BUFF_SIZE; i++) {
 		crc = i;
 		for (j=8; j>0; j--) {
 			if (crc&1) {
@@ -168,14 +173,14 @@
 	unsigned long crc;
 	int fd1 = -1;
 	char *data = NULL;
-	int err = 0;
 
 	nvram_header_t header;
 
 	fd1=open(NVRAM_PATH,O_RDONLY);
 	if(fd1<0) {
-		err = NVRAM_FLASH_ERR;
-		goto _err_out;
+		if(data) {free(data);} 
+		if(fd1 >= 0) {close(fd1);} 
+		return NVRAM_FLASH_ERR;
 	}
 	read(fd1, &header,sizeof(nvram_header_t));
 
@@ -183,8 +188,9 @@
 	lseek(fd1,NVRAM_HEADER_SIZE,0);
 	if(header.magic!=NVRAM_MAGIC)
 	{
-		err = NVRAM_MAGIC_ERR;
-		goto _err_out;
+		if(data) {free(data);} 
+		if(fd1 >= 0) {close(fd1);} 
+		return NVRAM_MAGIC_ERR;
 	}
 
 	data=malloc(header.len+1);
@@ -197,8 +203,9 @@
 		printf("CRC Error!!\n");
 		printf("header.crc=%lx\tcrc=%lx\n",header.crc,crc);
 #endif	
-		err  = NVRAM_CRC_ERR;
-		goto _err_out;
+		if(data) {free(data);} 
+		if(fd1 >= 0) {close(fd1);} 
+		return NVRAM_CRC_ERR;
 	}
 
 	writeFileBin_unlock(NVRAM_TMP_PATH, data, header.len);
@@ -207,13 +214,6 @@
 	close(fd1);	
 
 	return NVRAM_SUCCESS;
-
-_err_out:
-	if (data)
-		free(data);
-	if (fd1 >= 0)
-		close(fd1);
-	return err;
 }
 
 int nvram_load(void)
@@ -230,18 +230,45 @@
 	return err;
 }
 
+static int qram_load_unlock(char *querybuf, int size) {
+
+	if(querybuf==NULL) return NVRAM_DATA_ERR;
+
+	writeFileBin_unlock(QUERY_TMP_PATH, querybuf, size);
+	if(querybuf) free(querybuf);
+
+	return NVRAM_SUCCESS;
+}
+
+int qram_load(char *querybuf, int size) {
+	int tmp_lock = -1;
+	int err = 0;
+
+	tmp_lock = nvram_lock(QUERY_TMP_PATH);
+	err = qram_load_unlock(querybuf, size);
+	nvram_unlock(tmp_lock);
+
+	return err;
+}
+
 static int nvram_commit_unlock(void)
 {
 	int fd1 = -1;
 	char *data = NULL;
 	int len;
-	int err = 0;
 
 	nvram_header_t header;
 	
 	if((len=readFileBin_unlock(NVRAM_TMP_PATH, &data))<=0) {
-		err =  NVRAM_SHADOW_ERR;
-		goto _err_out;
+		if(data) {free(data);} 
+		return NVRAM_SHADOW_ERR;
+	}
+
+// add nvram overflow prevention
+	if(len >= (NVRAM_SIZE-NVRAM_HEADER_SIZE)) {
+		if(data) {free(data);}
+		NETGEAR_SYSLOG("01 00[NVRAM] Settings partition at capacity !!!");
+		return NVRAM_LEN_ERR;
 	}
 
 	header.magic=NVRAM_MAGIC;
@@ -249,8 +276,9 @@
 	header.len=len;
 
 	if((fd1=open(NVRAM_PATH,O_WRONLY | O_CREAT))<0) {
-		err =  NVRAM_FLASH_ERR;
-		goto _err_out;
+		if(data) {free(data);} 
+		if(fd1 >= 0) {close(fd1);} 
+		return NVRAM_FLASH_ERR;
 	}
 	write(fd1, &header,sizeof(nvram_header_t));
 	lseek(fd1,NVRAM_HEADER_SIZE,0);
@@ -260,24 +288,19 @@
 	lseek(fd1,NVRAM_HEADER_SIZE,0);
 	read(fd1, data,len);
 	if(header.crc!=crc32(data, len)){
-		err = NVRAM_FLASH_ERR;
-		goto _err_out;
+		if(data) {free(data);} 
+		if(fd1 >= 0) {close(fd1);} 
+		return NVRAM_FLASH_ERR;
 	}			
 
 	close(fd1);
 	free(data);
 
+#ifdef TR069
 	/* support tr069 notification */	
 	system("/usr/bin/killall -USR2 cwmp > /dev/null 2>&1");	
+#endif
 	return NVRAM_SUCCESS;
-
-_err_out:
-	if (data)
-		free(data);
-	if (fd1 >= 0)
-		close(fd1);
-
-	return err;
 }
 
 int nvram_commit(void)
@@ -363,7 +386,7 @@
 	return pt;
 }
 
-/* reentrant version. caller is responsable to free the return buffer. */
+/* reentrant version. caller is responsible to free the return buffer. */
 char* nvram_get_r(const char *name)
 {	
 	char *pt;
@@ -385,6 +408,24 @@
 	return pt;
 }
 
+/* reentrant version. caller is responsible to free the return buffer. */
+char* nvram_bcm_get_r(const char *name)
+{	
+	char *pt;
+	if((pt=__nvram_get_func(name,NVRAM_BCM_PATH,0))==NULL)
+			return NULL;
+
+	// [bcm_nvram] s
+	if ( pt && !strncmp( pt, "*DEL*", 5 ) ) // check if this is the deleted var
+	{
+		free(pt);
+		pt = NULL;
+	}
+	// [bcm_nvram] e
+	
+	return pt;
+}
+
 static int nvram_unset_func_unlock(const char* name,char *path)
 {
 	char *bufspace, *targetspace;
@@ -508,22 +549,188 @@
 {
 	return nvram_set_func(name,value,NVRAM_BCM_PATH);	
 }
+int nvram_unset(const char* name)
+{
+	return nvram_unset_func(name,NVRAM_TMP_PATH);
+}
 int nvram_bcm_unset(const char* name)
 {
 	return nvram_unset_func(name,NVRAM_BCM_PATH);
 }
 
+int nvram_reset(void)
+{
+	int tmp_lock = -1, def_lock = -1;
+	char *data = NULL;
+	int len, err;
+
+	tmp_lock = nvram_lock(NVRAM_TMP_PATH);
+	def_lock = nvram_lock(NVRAM_DEFAULT);
+
+	if((len=readFileBin_unlock(NVRAM_DEFAULT, &data))<=0) {
+		if(data) {free(data);}
+		err = NVRAM_SHADOW_ERR;
+	}
+	else {
+		writeFileBin_unlock(NVRAM_TMP_PATH, data, len);
+		free(data);
+		err = NVRAM_SUCCESS;
+	}
+
+	nvram_unlock(def_lock);
+	nvram_unlock(tmp_lock);
+
+	return err;
+}
+
+int nvram_show(char* path)
+{
+	int path_lock = -1;
+	char *data = NULL, *s;
+	int len, err;
+
+	path_lock = nvram_lock(path);
+
+	if((len=readFileBin_unlock(path, &data))<=0) {
+		if(data) {free(data);}
+		err = NVRAM_SHADOW_ERR;
+	}
+	else {
+		for(s=data;*s;) {
+		puts(s);
+		while(*(s++));
+		}
+	free(data);
+	err = NVRAM_SUCCESS;
+	}
+
+	nvram_unlock(path_lock);
+
+	return err;
+}
+
+int nvram_sub_find(const char *name, const char *find)
+{
+	int err = 0;
+	char *value, *s;
+
+	if(!(value=nvram_get_r(name))) 
+		err = 0;
+	else 
+		for(s=value;*s;s++)						/* search for exact string-to-find match */
+			if(!strncmp(s, find, strlen(find)) 							/* string content presence */
+			&& ((strlen(s)==strlen(value)) || (*(s-1)==DIVISION_SYMBOL))				/* left string delimiter */
+			&& ((*(s+strlen(find))==DIVISION_SYMBOL) || (*(s+strlen(find))==END_SYMBOL))) {		/* right string delimiter */
+				err = 1;
+				break;
+			}
+	if(value) 
+		free(value);
+
+	return err;
+}
+
+int nvram_append(const char* name,const char* value)
+{
+	int err, size;
+	char *old, *new;
+
+	if(nvram_sub_find(name, value))						/* assure no identical (sub)values are stored */
+		err = nvram_delete(name, value);
+
+	old = nvram_safe_get_r(name);						/* safe reentrant version: no NULL and return must be free */
+	if(!strcmp(old, "")) 
+		err = nvram_set(name,value);
+	else {
+		size = strlen(old) +strlen(value) +2;				/* old + \1 + value + \0 */
+		if((new = (char*)malloc(size)) == NULL)
+			err = NVRAM_SHADOW_ERR;
+		else {
+			snprintf(new, size, "%s%c%s", old, DIVISION_SYMBOL, value);	/* append the new (sub)value */
+			err = nvram_set(name, new);				/* set new string */
+			free(new);
+		}
+	}
+	if(old) 
+		free(old);
+
+	return err;
+}
+
+int nvram_delete(const char* name,const char* value)
+{
+	int err;
+	char *old, *s, *s_old;
+
+	old = nvram_safe_get_r(name);						/* safe reentrant version: no NULL and return must be free */
+	if(!strcmp(old, "")) 
+		err = NVRAM_DATA_ERR;
+	else {
+		err = nvram_set(name, "");					/* clear name var settings content */
+		for(s=(char*)strtok_r(old, "\1", &s_old);s != NULL;s=(char*)strtok_r(NULL, "\1", &s_old)) {  /* tokenize old var string */
+			if(strcmp(s, value)) 
+				err = nvram_append(name, s);
+		}
+	}
+	if(old) 
+		free(old);
+
+	return err;
+}
+
+int nvram_insert(const char* name,const char* value)
+{
+	int err;
+	char *old, *s, *s_old;
+
+	old = nvram_safe_get_r(name);						/* safe reentrant version: no NULL and return must be free */
+	err = nvram_set(name, "");						/* clear name var settings content */
+	err = nvram_set(name, value);						/* insert value as first */
+
+	for(s=(char*)strtok_r(old, "\1", &s_old);s != NULL;s=(char*)strtok_r(NULL, "\1", &s_old))	/* tokenize old var string */
+		if(strcmp(s, value))						/* assure no identical (sub)values are stored */
+			err = nvram_append(name, s);
+	if(old) 
+		free(old);
+
+	return err;
+}
+
+int nvram_change(const char* name,const char* oldval,const char* newval)
+{
+	int err;
+	char *old, *s, *s_old;
+
+	if(!strcmp(oldval, newval) || !nvram_sub_find(name, oldval))		/* if old & new are equal or old missed no change */
+		err = NVRAM_DATA_ERR;
+	else {
+		old = nvram_safe_get_r(name);					/* safe reentrant version: no NULL and return must be free */
+		err = nvram_set(name, "");					/* clear name var settings content */
+		for(s=(char*)strtok_r(old, "\1", &s_old);s != NULL;s=(char*)strtok_r(NULL, "\1", &s_old)) {	/* tokenize old var string */
+			if(!strcmp(s, newval))					/* assure no identical (sub)values are stored */
+				continue;
+			else if(!strcmp(s, oldval)) 
+				err = nvram_append(name, newval);
+			else
+				err = nvram_append(name, s);
+		}
+		if(old) 
+			free(old);
+	}
+
+	return err;
+}
 
 /*
 	get or set the value of a key
 */
 int nv_set(const char* category, const char* key, int key_idx, const char* value)
 {
-	char name[256];
-	char path[256];
+	char name[KEY_BUFF_SIZE];
+	char path[KEY_BUFF_SIZE];
 
-	snprintf( name, 256, "%s%d", key, key_idx);
-	snprintf( path, 256, "%s%s", BASE_PATH, category);
+	snprintf( name, KEY_BUFF_SIZE, "%s%d", key, key_idx);
+	snprintf( path, KEY_BUFF_SIZE, "%s%s", BASE_PATH, category);
 
 	return nvram_set_func( name, value, path);
 }
@@ -531,17 +738,17 @@
 
 int nv_setFX(const char* category, const char* key, int key_idx, const char *value_format, ...)
 {
-	char name[256];
-	char path[256];
-	char value[4096];
+	char name[KEY_BUFF_SIZE];
+	char path[KEY_BUFF_SIZE];
+	char value[NVRAM_BUFF_SIZE];
 	va_list arg;
 	
-	snprintf( name, 256, "%s%d", key, key_idx);
-	snprintf( path, 256, "%s%s", BASE_PATH, category);
+	snprintf( name, KEY_BUFF_SIZE, "%s%d", key, key_idx);
+	snprintf( path, KEY_BUFF_SIZE, "%s%s", BASE_PATH, category);
 
 	value[0]=0;
 	va_start(arg, value_format);
-	vsnprintf(value,4096, value_format, arg);
+	vsnprintf(value,NVRAM_BUFF_SIZE, value_format, arg);
 	va_end(arg);
 	
 
@@ -551,9 +758,9 @@
 
 int nv_set_int(const char* category, const char* key, int key_idx, int value)
 {
-	char value_str[256];
+	char value_str[KEY_BUFF_SIZE];
 	
-	snprintf( value_str, 256, "%d", value);
+	snprintf( value_str, KEY_BUFF_SIZE, "%d", value);
 
 	return nv_set(category, key, key_idx, value_str);
 }
@@ -562,11 +769,11 @@
 char* nv_get(const char* category, const char* key, int key_idx)
 {
     char *pt;
-	char name[256];
-	char path[256];
+	char name[KEY_BUFF_SIZE];
+	char path[KEY_BUFF_SIZE];
 
-	snprintf( name, 256, "%s%d", key, key_idx);
-	snprintf( path, 256, "%s%s", BASE_PATH, category);
+	snprintf( name, KEY_BUFF_SIZE, "%s%d", key, key_idx);
+	snprintf( path, KEY_BUFF_SIZE, "%s%s", BASE_PATH, category);
 
 	if((pt=__nvram_get_func(name, path, 1))==NULL)
 		return NULL;
@@ -582,15 +789,15 @@
 	return pt;
 }
 
-/* reentrant version. caller is responsable to free the return buffer. */
+/* reentrant version. caller is responsible to free the return buffer. */
 char* nv_get_r(const char* category, const char* key, int key_idx)
 {
     char *pt;
-	char name[256];
-	char path[256];
+	char name[KEY_BUFF_SIZE];
+	char path[KEY_BUFF_SIZE];
 
-	snprintf( name, 256, "%s%d", key, key_idx);
-	snprintf( path, 256, "%s%s", BASE_PATH, category);
+	snprintf( name, KEY_BUFF_SIZE, "%s%d", key, key_idx);
+	snprintf( path, KEY_BUFF_SIZE, "%s%s", BASE_PATH, category);
 
 	if((pt=__nvram_get_func(name, path, 0))==NULL)
 		return NULL;
diff -urN work/nvram-0.1.4/nvram.h work/nvram-0.1.4/nvram.h
--- work/nvram-0.1.4/nvram.h	2016-10-11 17:53:07.000000000 +0200
+++ work/nvram-0.1.4/nvram.h	2017-02-05 21:24:36.082726345 +0100
@@ -10,48 +10,63 @@
 
 /* line terminator by 0x00 
  * data terminator by two 0x00
- * value separaed by 0x01
+ * subvalue divided by 0x01
+ * subsubvalue separated by 0x02
  */	
 
 /* nvram path */
-#ifndef BOOT_NAND_FLASH
-//#define NVRAM_PATH     "/dev/mtdblock/3"          /* ex:  /dev/mtd/nvram */
-#define NVRAM_PATH     "/dev/mtdblock14"          /* ex:  /dev/mtd/nvram */
-#else
-#define NVRAM_PATH   "/config/nvram/nvram"            /* ex:  /dev/mtd/nvram */
+#define NVRAM_PATH		"/config/nvram/nvram"		/* ex:  /dev/mtd/nvram */
+
+#define NVRAM_TMP_PATH		"/tmp/nvram"			/* ex:  /tmp/nvram     */
+#define NVRAM_BCM_PATH		"/tmp/nvram.bcm"
+#define QUERY_TMP_PATH		"/tmp/query"
+#define NVRAM_DEFAULT		"/etc/default"			/* ex:  /etc/default   */
+
+/* local host debug purpose */
+#ifdef LOCAL
+#undef NVRAM_PATH
+#define NVRAM_PATH		LROOT "/config/nvram/nvram"
+#undef NVRAM_TMP_PATH
+#define NVRAM_TMP_PATH		LROOT "/tmp/nvram"
+#undef NVRAM_BCM_PATH
+#define NVRAM_BCM_PATH		LROOT "/tmp/nvram.bcm"
+#undef NVRAM_DEFAULT
+#define NVRAM_DEFAULT		LROOT "/etc/default"
 #endif
 
-#define NVRAM_TMP_PATH "/tmp/nvram"		  /* ex:  /tmp/nvram     */
-#define NVRAM_BCM_PATH "/tmp/nvram.bcm"		  /* ex:  /tmp/nvram     */
-#define NVRAM_DEFAULT  "/etc/default"             /* ex:  /etc/default   */
+/* used token tags */
+#define END_SYMBOL		0x00
+#define DIVISION_SYMBOL		0x01
+#define SEPARATION_SYMBOL	0x02
 
+/* NVRAM_HEADER MAGIC */ 
+#define NVRAM_MAGIC		0x004E4F52			/* RON */
 
-#define END_SYMBOL	    0x00		  	
-#define DIVISION_SYMBOL	    0x01		  
+/* used 12bytes, 28bytes reserved */
+#define NVRAM_HEADER_SIZE	40       		 
 
-/* NVRAM_HEADER MAGIC*/ 
-#define NVRAM_MAGIC 		    0x004E4F52		 /* RON */
+/* max size in flash */
+#define NVRAM_SIZE		4194303				/* nvram size 4M bytes*/
 
-/* used 12bytes, 28bytes reserved */
-#define NVRAM_HEADER_SIZE   40       		 
-/* max size in flash*/
-#define NVRAM_SIZE          65535		  /* nvram size 64k bytes*/
+/* each line max size */
+#define NVRAM_BUFF_SIZE		4096
 
-/* each line max size*/
-#define NVRAM_BUFF_SIZE           4096		 
+/* each key buff size */
+#define KEY_BUFF_SIZE		256
 
 /* errorno */
-#define NVRAM_SUCCESS       	    0
-#define NVRAM_FLASH_ERR           1 
-#define NVRAM_MAGIC_ERR	    2
-#define NVRAM_LEN_ERR	    3
-#define NVRAM_CRC_ERR	    4
-#define NVRAM_SHADOW_ERR	    5
+#define NVRAM_SUCCESS		0
+#define NVRAM_FLASH_ERR		1 
+#define NVRAM_MAGIC_ERR		2
+#define NVRAM_LEN_ERR		3
+#define NVRAM_CRC_ERR		4
+#define NVRAM_SHADOW_ERR	5
+#define NVRAM_DATA_ERR		6
 
 /*
  * nvram header struct 		            
  * magic    = 0x004E4F52 (RON)             
- * len      = 0~65495                      
+ * len      = 0~NVRAM_SIZE                      
  * crc      = use crc-32                    
  * reserved = reserved 	                    
  */
@@ -71,6 +86,14 @@
 int nvram_load(void);
 
 
+/* Copy data from dynamic query array to QUERY_TMP_PATH
+ * @param	querybuf	parsed & tokenized query container
+ * @param	size		size of the querybuf
+ * @return	0 on success and errorno on failure     
+ */
+int qram_load(char *querybuf, int size);
+
+
 /*
  * Write data from NVRAM_TMP_PATH to flash   
  * @return	0 on success and errorno on failure     
@@ -78,19 +101,33 @@
 int nvram_commit(void);
 
 /*
- * Get the value of an NVRAM variable
+ * Get the value of an NVRAM variable: value is traced, value must not be free
  * @param	name	name of variable to get
  * @return	value of variable or NULL if undefined
  */
 char* nvram_get_func(const char *name,char *path);
 #define nvram_get_def(name) nvram_get_func(name,NVRAM_DEFAULT)
 #define nvram_bcm_get(name) nvram_get_func(name,NVRAM_BCM_PATH)
+#define qram_get(name) nvram_get_func(name,QUERY_TMP_PATH)
+char* nvram_get(const char *name);
 #define nvram_safe_get(msg) (nvram_get(msg)?:"")
+#define qram_safe_get(msg) (qram_get(msg)?:"")
+#define nvram_safedef_get(msg, def) (nvram_get(msg)?:def)
 #define nvram_bcm_safe_get(msg) (nvram_bcm_get(msg)?:"")
-char* nvram_get(const char *name);
+
+/*
+ * Get the reentrant value of an NVRAM variable: value is not traced, the caller must free the value manually
+ * @param	name	name of variable to get
+ * @return	value of variable or NULL if undefined
+ */
 char* nvram_get_func_r(const char *name,char *path);
 char* nvram_get_r(const char *name);
+char* nvram_bcm_get_r(const char *name);
+#define qram_get_r(name) (nvram_get_func_r(const char *name,QUERY_TMP_PATH))
 #define nvram_safe_get_r(name) (nvram_get_r(name)?:strdup(""))
+#define qram_safe_get_r(name) (qram_get_r(name)?:strdup(""))
+#define nvram_safedef_get_r(name, def) (nvram_get_r(name)?:strdup(def))
+#define nvram_bcm_safe_get_r(name) (nvram_bcm_get_r(name)?:strdup(""))
 
 /*
  * Match an NVRAM variable
@@ -122,11 +159,89 @@
  * NOTE: use nvram_commit to commit this change to flash.
  */
 int nvram_set(const char* name,const char* value);
-
 int nvram_bcm_set(const char* name,const char* value);
+
+/*
+ * Unset an NVRAM variable
+ * @param	name	name of variable to unset
+ * @return	0 on success and errorno on failure
+ * NOTE: use nvram_commit to commit this change to flash.
+ */
+int nvram_unset(const char* name);
 int nvram_bcm_unset(const char* name);
 
 /*
+ * Reset NVRAM to default variables: copy NVRAM_DEFAULT to NVRAM_TMP_PATH (destroying previous NVRAM_TMP_PATH content)
+ * @return	0 on success and errorno on failure
+ * NOTE: use nvram_commit to commit this change to flash.
+ */
+int nvram_reset(void);
+
+/*
+ * Show NVRAM path variables in list order: name=value\nname=value\n... ...name=value\n
+ * @param	path	nvram file path to show
+ * @return	0 on success and errorno on failure
+ */
+int nvram_show(char* path);
+#define nvram_tmp_show() nvram_show(NVRAM_TMP_PATH)
+#define nvram_def_show() nvram_show(NVRAM_DEFAULT)
+#define nvram_bcm_show() nvram_show(NVRAM_BCM_PATH)
+
+/*
+ * Find an NVRAM (sub)variable
+ * @param	name	name of variable containing (sub)vars
+ * @param	match	(sub)value to compare against (sub)values of variable
+ * @return	TRUE if variable is defined and one of its (sub)values is string equal to find or FALSE otherwise
+ */
+int nvram_sub_find(const char *name, const char *find);
+
+/*
+ * Append the (sub)value of an NVRAM variable at the end ( name=foo1\1foo2\1foo3\0 --> name=foo1\1foo2\1foo3\1value\0 )
+ * The same behaviour of "/usr/sbin/nvram add" with safe initialization of variable in case of void value/not present and duplicate check.
+ * Act as nvram_set if no previous variables are present.
+ * If (sub)value to be appended is already present move it as last.
+ * @param	name	name of variable to set
+ * @param	value	subvalue of variable
+ * @return	0 on success and errorno on failure
+ * NOTE: use nvram_commit to commit this change to flash.
+ */
+int nvram_append(const char* name,const char* value);
+
+/*
+ * Delete the (sub)value of an NVRAM variable ( name=foo1\1foo2\1value\1foo3\0 --> name=foo1\1foo2\1foo3\0 )
+ * Act as nvram_set of void variable if only one (sub)value is present.
+ * @param	name	name of variable to set
+ * @param	value	subvalue of variable
+ * @return	0 on success and errorno on failure
+ * NOTE: use nvram_commit to commit this change to flash.
+ */
+int nvram_delete(const char* name,const char* value);
+
+/*
+ * Insert the (sub)value of an NVRAM variable at the beginning ( name=foo1\1foo2\1foo3\0 --> name=value\1foo1\1foo2\1foo3\0 )
+ * Act as nvram_set if no previous variables are present.
+ * If (sub)value to be inserted is already present move as first.
+ * @param	name	name of variable to set
+ * @param	value	subvalue of variable
+ * @return	0 on success and errorno on failure
+ * NOTE: use nvram_commit to commit this change to flash.
+ */
+int nvram_insert(const char* name,const char* value);
+
+/*
+ * Change the old (sub)value of an NVRAM variable with a new (sub)value ( name=foo1\1foo2\1old\1foo3\0 --> name=foo1\1foo2\1new\1foo3\0 )
+ * If oldval and newval (sub)values are equal leave variable content unchanged.
+ * If oldval (sub)value to be changed is missed leave variable content unchanged.
+ * If newval (sub)value is already present change will be done as expected and the other newval duplicate removed.
+ * @param	name	name of variable to set
+ * @param	oldval  old subvalue to delete
+ * @param	newval	new subvalue to add
+ * @return	0 on success and errorno on failure
+ * NOTE: use nvram_commit to commit this change to flash.
+ */
+int nvram_change(const char* name,const char* oldval,const char* newval);
+
+/*
 	get or set the value of a key
 */
 int nv_set(const char* category, const char* key, int key_idx, const char* value);
diff -urN work/nvram-0.1.4/nvram_lock.c work/nvram-0.1.4/nvram_lock.c
--- work/nvram-0.1.4/nvram_lock.c	2016-10-11 17:53:07.000000000 +0200
+++ work/nvram-0.1.4/nvram_lock.c	2017-01-26 22:29:06.100722779 +0100
@@ -13,9 +13,13 @@
 	char lock_path[PATH_MAX];
 	char *p;
 	int fd;
-
+#ifndef LOCAL
 	sprintf(lock_path, "/var/lock/%s.lock", path);
 	p = lock_path + sizeof("/var/lock/");
+#else
+	sprintf(lock_path, "%s/var/lock/%s.lock", LROOT, path);
+	p = lock_path + sizeof(LROOT) + sizeof("/var/lock/");
+#endif
 	while (*p) {
 		if (*p == '/') *p = '_';
 		p++;
